{"ast":null,"code":"import * as React from 'react';\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\nimport { useIsMounted } from '../../utils/use-is-mounted.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { useUnmountEffect } from '../../utils/use-unmount-effect.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\n\nconst getChildKey = child => child.key || \"\";\n\nfunction updateChildLookup(children, allChildren) {\n  children.forEach(child => {\n    const key = getChildKey(child);\n    allChildren.set(key, child);\n  });\n}\n\nfunction onlyElements(children) {\n  const filtered = []; // We use forEach here instead of map as map mutates the component key by preprending `.$`\n\n  Children.forEach(children, child => {\n    if (isValidElement(child)) filtered.push(child);\n  });\n  return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\n\n\nconst AnimatePresence = _ref => {\n  let {\n    children,\n    custom,\n    initial = true,\n    onExitComplete,\n    exitBeforeEnter,\n    presenceAffectsLayout = true,\n    mode = \"sync\"\n  } = _ref;\n\n  // Support deprecated exitBeforeEnter prop\n  if (exitBeforeEnter) {\n    mode = \"wait\";\n\n    if (process.env.NODE_ENV !== \"production\") {\n      warnOnce(false, \"Replace exitBeforeEnter with mode='wait'\");\n    }\n  } // We want to force a re-render once all exiting animations have finished. We\n  // either use a local forceRender function, or one from a parent context if it exists.\n\n\n  let [forceRender] = useForceUpdate();\n  const forceRenderLayoutGroup = useContext(LayoutGroupContext).forceRender;\n  if (forceRenderLayoutGroup) forceRender = forceRenderLayoutGroup;\n  const isMounted = useIsMounted(); // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n\n  const filteredChildren = onlyElements(children);\n  let childrenToRender = filteredChildren;\n  const exiting = new Set(); // Keep a living record of the children we're actually rendering so we\n  // can diff to figure out which are entering and exiting\n\n  const presentChildren = useRef(childrenToRender); // A lookup table to quickly reference components by key\n\n  const allChildren = useRef(new Map()).current; // If this is the initial component render, just deal with logic surrounding whether\n  // we play onMount animations or not.\n\n  const isInitialRender = useRef(true);\n  useIsomorphicLayoutEffect(() => {\n    isInitialRender.current = false;\n    updateChildLookup(filteredChildren, allChildren);\n    presentChildren.current = childrenToRender;\n  });\n  useUnmountEffect(() => {\n    isInitialRender.current = true;\n    allChildren.clear();\n    exiting.clear();\n  });\n\n  if (isInitialRender.current) {\n    return React.createElement(React.Fragment, null, childrenToRender.map(child => React.createElement(PresenceChild, {\n      key: getChildKey(child),\n      isPresent: true,\n      initial: initial ? undefined : false,\n      presenceAffectsLayout: presenceAffectsLayout,\n      mode: mode\n    }, child)));\n  } // If this is a subsequent render, deal with entering and exiting children\n\n\n  childrenToRender = [...childrenToRender]; // Diff the keys of the currently-present and target children to update our\n  // exiting list.\n\n  const presentKeys = presentChildren.current.map(getChildKey);\n  const targetKeys = filteredChildren.map(getChildKey); // Diff the present children with our target children and mark those that are exiting\n\n  const numPresent = presentKeys.length;\n\n  for (let i = 0; i < numPresent; i++) {\n    const key = presentKeys[i];\n\n    if (targetKeys.indexOf(key) === -1) {\n      exiting.add(key);\n    }\n  } // If we currently have exiting children, and we're deferring rendering incoming children\n  // until after all current children have exiting, empty the childrenToRender array\n\n\n  if (mode === \"wait\" && exiting.size) {\n    childrenToRender = [];\n  } // Loop through all currently exiting components and clone them to overwrite `animate`\n  // with any `exit` prop they might have defined.\n\n\n  exiting.forEach(key => {\n    // If this component is actually entering again, early return\n    if (targetKeys.indexOf(key) !== -1) return;\n    const child = allChildren.get(key);\n    if (!child) return;\n    const insertionIndex = presentKeys.indexOf(key);\n\n    const onExit = () => {\n      allChildren.delete(key);\n      exiting.delete(key); // Remove this child from the present children\n\n      const removeIndex = presentChildren.current.findIndex(presentChild => presentChild.key === key);\n      presentChildren.current.splice(removeIndex, 1); // Defer re-rendering until all exiting children have indeed left\n\n      if (!exiting.size) {\n        presentChildren.current = filteredChildren;\n        if (isMounted.current === false) return;\n        forceRender();\n        onExitComplete && onExitComplete();\n      }\n    };\n\n    childrenToRender.splice(insertionIndex, 0, React.createElement(PresenceChild, {\n      key: getChildKey(child),\n      isPresent: false,\n      onExitComplete: onExit,\n      custom: custom,\n      presenceAffectsLayout: presenceAffectsLayout,\n      mode: mode\n    }, child));\n  }); // Add `MotionContext` even to children that don't need it to ensure we're rendering\n  // the same tree between renders\n\n  childrenToRender = childrenToRender.map(child => {\n    const key = child.key;\n    return exiting.has(key) ? child : React.createElement(PresenceChild, {\n      key: getChildKey(child),\n      isPresent: true,\n      presenceAffectsLayout: presenceAffectsLayout,\n      mode: mode\n    }, child);\n  });\n\n  if (process.env.NODE_ENV !== \"production\" && mode === \"wait\" && childrenToRender.length > 1) {\n    console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n  }\n\n  return React.createElement(React.Fragment, null, exiting.size ? childrenToRender : childrenToRender.map(child => cloneElement(child)));\n};\n\nexport { AnimatePresence };","map":{"version":3,"names":["React","useContext","useRef","cloneElement","Children","isValidElement","useForceUpdate","useIsMounted","PresenceChild","LayoutGroupContext","useIsomorphicLayoutEffect","useUnmountEffect","warnOnce","getChildKey","child","key","updateChildLookup","children","allChildren","forEach","set","onlyElements","filtered","push","AnimatePresence","custom","initial","onExitComplete","exitBeforeEnter","presenceAffectsLayout","mode","process","env","NODE_ENV","forceRender","forceRenderLayoutGroup","isMounted","filteredChildren","childrenToRender","exiting","Set","presentChildren","Map","current","isInitialRender","clear","createElement","Fragment","map","isPresent","undefined","presentKeys","targetKeys","numPresent","length","i","indexOf","add","size","get","insertionIndex","onExit","delete","removeIndex","findIndex","presentChild","splice","has","console","warn"],"sources":["C:/Users/DEV/Desktop/Projects/Pizza_Fun/node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs"],"sourcesContent":["import * as React from 'react';\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\nimport { useIsMounted } from '../../utils/use-is-mounted.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { useUnmountEffect } from '../../utils/use-unmount-effect.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\n\nconst getChildKey = (child) => child.key || \"\";\nfunction updateChildLookup(children, allChildren) {\n    children.forEach((child) => {\n        const key = getChildKey(child);\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, (child) => {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode = \"sync\", }) => {\n    // Support deprecated exitBeforeEnter prop\n    if (exitBeforeEnter) {\n        mode = \"wait\";\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, \"Replace exitBeforeEnter with mode='wait'\");\n        }\n    }\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    let [forceRender] = useForceUpdate();\n    const forceRenderLayoutGroup = useContext(LayoutGroupContext).forceRender;\n    if (forceRenderLayoutGroup)\n        forceRender = forceRenderLayoutGroup;\n    const isMounted = useIsMounted();\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    const filteredChildren = onlyElements(children);\n    let childrenToRender = filteredChildren;\n    const exiting = new Set();\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    const presentChildren = useRef(childrenToRender);\n    // A lookup table to quickly reference components by key\n    const allChildren = useRef(new Map()).current;\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    const isInitialRender = useRef(true);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        updateChildLookup(filteredChildren, allChildren);\n        presentChildren.current = childrenToRender;\n    });\n    useUnmountEffect(() => {\n        isInitialRender.current = true;\n        allChildren.clear();\n        exiting.clear();\n    });\n    if (isInitialRender.current) {\n        return (React.createElement(React.Fragment, null, childrenToRender.map((child) => (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child)))));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    childrenToRender = [...childrenToRender];\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    const presentKeys = presentChildren.current.map(getChildKey);\n    const targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    const numPresent = presentKeys.length;\n    for (let i = 0; i < numPresent; i++) {\n        const key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1) {\n            exiting.add(key);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (mode === \"wait\" && exiting.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exiting.forEach((key) => {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        const child = allChildren.get(key);\n        if (!child)\n            return;\n        const insertionIndex = presentKeys.indexOf(key);\n        const onExit = () => {\n            allChildren.delete(key);\n            exiting.delete(key);\n            // Remove this child from the present children\n            const removeIndex = presentChildren.current.findIndex((presentChild) => presentChild.key === key);\n            presentChildren.current.splice(removeIndex, 1);\n            // Defer re-rendering until all exiting children have indeed left\n            if (!exiting.size) {\n                presentChildren.current = filteredChildren;\n                if (isMounted.current === false)\n                    return;\n                forceRender();\n                onExitComplete && onExitComplete();\n            }\n        };\n        childrenToRender.splice(insertionIndex, 0, React.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map((child) => {\n        const key = child.key;\n        return exiting.has(key) ? (child) : (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\n    });\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        childrenToRender.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    return (React.createElement(React.Fragment, null, exiting.size\n        ? childrenToRender\n        : childrenToRender.map((child) => cloneElement(child))));\n};\n\nexport { AnimatePresence };\n"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,YAA7B,EAA2CC,QAA3C,EAAqDC,cAArD,QAA2E,OAA3E;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,YAAT,QAA6B,gCAA7B;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,kBAAT,QAAmC,sCAAnC;AACA,SAASC,yBAAT,QAA0C,uCAA1C;AACA,SAASC,gBAAT,QAAiC,oCAAjC;AACA,SAASC,QAAT,QAAyB,2BAAzB;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAWA,KAAK,CAACC,GAAN,IAAa,EAA5C;;AACA,SAASC,iBAAT,CAA2BC,QAA3B,EAAqCC,WAArC,EAAkD;EAC9CD,QAAQ,CAACE,OAAT,CAAkBL,KAAD,IAAW;IACxB,MAAMC,GAAG,GAAGF,WAAW,CAACC,KAAD,CAAvB;IACAI,WAAW,CAACE,GAAZ,CAAgBL,GAAhB,EAAqBD,KAArB;EACH,CAHD;AAIH;;AACD,SAASO,YAAT,CAAsBJ,QAAtB,EAAgC;EAC5B,MAAMK,QAAQ,GAAG,EAAjB,CAD4B,CAE5B;;EACAlB,QAAQ,CAACe,OAAT,CAAiBF,QAAjB,EAA4BH,KAAD,IAAW;IAClC,IAAIT,cAAc,CAACS,KAAD,CAAlB,EACIQ,QAAQ,CAACC,IAAT,CAAcT,KAAd;EACP,CAHD;EAIA,OAAOQ,QAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,eAAe,GAAG,QAAyH;EAAA,IAAxH;IAAEP,QAAF;IAAYQ,MAAZ;IAAoBC,OAAO,GAAG,IAA9B;IAAoCC,cAApC;IAAoDC,eAApD;IAAqEC,qBAAqB,GAAG,IAA7F;IAAmGC,IAAI,GAAG;EAA1G,CAAwH;;EAC7I;EACA,IAAIF,eAAJ,EAAqB;IACjBE,IAAI,GAAG,MAAP;;IACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACvCrB,QAAQ,CAAC,KAAD,EAAQ,0CAAR,CAAR;IACH;EACJ,CAP4I,CAQ7I;EACA;;;EACA,IAAI,CAACsB,WAAD,IAAgB5B,cAAc,EAAlC;EACA,MAAM6B,sBAAsB,GAAGlC,UAAU,CAACQ,kBAAD,CAAV,CAA+ByB,WAA9D;EACA,IAAIC,sBAAJ,EACID,WAAW,GAAGC,sBAAd;EACJ,MAAMC,SAAS,GAAG7B,YAAY,EAA9B,CAd6I,CAe7I;;EACA,MAAM8B,gBAAgB,GAAGhB,YAAY,CAACJ,QAAD,CAArC;EACA,IAAIqB,gBAAgB,GAAGD,gBAAvB;EACA,MAAME,OAAO,GAAG,IAAIC,GAAJ,EAAhB,CAlB6I,CAmB7I;EACA;;EACA,MAAMC,eAAe,GAAGvC,MAAM,CAACoC,gBAAD,CAA9B,CArB6I,CAsB7I;;EACA,MAAMpB,WAAW,GAAGhB,MAAM,CAAC,IAAIwC,GAAJ,EAAD,CAAN,CAAkBC,OAAtC,CAvB6I,CAwB7I;EACA;;EACA,MAAMC,eAAe,GAAG1C,MAAM,CAAC,IAAD,CAA9B;EACAQ,yBAAyB,CAAC,MAAM;IAC5BkC,eAAe,CAACD,OAAhB,GAA0B,KAA1B;IACA3B,iBAAiB,CAACqB,gBAAD,EAAmBnB,WAAnB,CAAjB;IACAuB,eAAe,CAACE,OAAhB,GAA0BL,gBAA1B;EACH,CAJwB,CAAzB;EAKA3B,gBAAgB,CAAC,MAAM;IACnBiC,eAAe,CAACD,OAAhB,GAA0B,IAA1B;IACAzB,WAAW,CAAC2B,KAAZ;IACAN,OAAO,CAACM,KAAR;EACH,CAJe,CAAhB;;EAKA,IAAID,eAAe,CAACD,OAApB,EAA6B;IACzB,OAAQ3C,KAAK,CAAC8C,aAAN,CAAoB9C,KAAK,CAAC+C,QAA1B,EAAoC,IAApC,EAA0CT,gBAAgB,CAACU,GAAjB,CAAsBlC,KAAD,IAAYd,KAAK,CAAC8C,aAAN,CAAoBtC,aAApB,EAAmC;MAAEO,GAAG,EAAEF,WAAW,CAACC,KAAD,CAAlB;MAA2BmC,SAAS,EAAE,IAAtC;MAA4CvB,OAAO,EAAEA,OAAO,GAAGwB,SAAH,GAAe,KAA3E;MAAkFrB,qBAAqB,EAAEA,qBAAzG;MAAgIC,IAAI,EAAEA;IAAtI,CAAnC,EAAiLhB,KAAjL,CAAjC,CAA1C,CAAR;EACH,CAvC4I,CAwC7I;;;EACAwB,gBAAgB,GAAG,CAAC,GAAGA,gBAAJ,CAAnB,CAzC6I,CA0C7I;EACA;;EACA,MAAMa,WAAW,GAAGV,eAAe,CAACE,OAAhB,CAAwBK,GAAxB,CAA4BnC,WAA5B,CAApB;EACA,MAAMuC,UAAU,GAAGf,gBAAgB,CAACW,GAAjB,CAAqBnC,WAArB,CAAnB,CA7C6I,CA8C7I;;EACA,MAAMwC,UAAU,GAAGF,WAAW,CAACG,MAA/B;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAApB,EAAgCE,CAAC,EAAjC,EAAqC;IACjC,MAAMxC,GAAG,GAAGoC,WAAW,CAACI,CAAD,CAAvB;;IACA,IAAIH,UAAU,CAACI,OAAX,CAAmBzC,GAAnB,MAA4B,CAAC,CAAjC,EAAoC;MAChCwB,OAAO,CAACkB,GAAR,CAAY1C,GAAZ;IACH;EACJ,CArD4I,CAsD7I;EACA;;;EACA,IAAIe,IAAI,KAAK,MAAT,IAAmBS,OAAO,CAACmB,IAA/B,EAAqC;IACjCpB,gBAAgB,GAAG,EAAnB;EACH,CA1D4I,CA2D7I;EACA;;;EACAC,OAAO,CAACpB,OAAR,CAAiBJ,GAAD,IAAS;IACrB;IACA,IAAIqC,UAAU,CAACI,OAAX,CAAmBzC,GAAnB,MAA4B,CAAC,CAAjC,EACI;IACJ,MAAMD,KAAK,GAAGI,WAAW,CAACyC,GAAZ,CAAgB5C,GAAhB,CAAd;IACA,IAAI,CAACD,KAAL,EACI;IACJ,MAAM8C,cAAc,GAAGT,WAAW,CAACK,OAAZ,CAAoBzC,GAApB,CAAvB;;IACA,MAAM8C,MAAM,GAAG,MAAM;MACjB3C,WAAW,CAAC4C,MAAZ,CAAmB/C,GAAnB;MACAwB,OAAO,CAACuB,MAAR,CAAe/C,GAAf,EAFiB,CAGjB;;MACA,MAAMgD,WAAW,GAAGtB,eAAe,CAACE,OAAhB,CAAwBqB,SAAxB,CAAmCC,YAAD,IAAkBA,YAAY,CAAClD,GAAb,KAAqBA,GAAzE,CAApB;MACA0B,eAAe,CAACE,OAAhB,CAAwBuB,MAAxB,CAA+BH,WAA/B,EAA4C,CAA5C,EALiB,CAMjB;;MACA,IAAI,CAACxB,OAAO,CAACmB,IAAb,EAAmB;QACfjB,eAAe,CAACE,OAAhB,GAA0BN,gBAA1B;QACA,IAAID,SAAS,CAACO,OAAV,KAAsB,KAA1B,EACI;QACJT,WAAW;QACXP,cAAc,IAAIA,cAAc,EAAhC;MACH;IACJ,CAdD;;IAeAW,gBAAgB,CAAC4B,MAAjB,CAAwBN,cAAxB,EAAwC,CAAxC,EAA2C5D,KAAK,CAAC8C,aAAN,CAAoBtC,aAApB,EAAmC;MAAEO,GAAG,EAAEF,WAAW,CAACC,KAAD,CAAlB;MAA2BmC,SAAS,EAAE,KAAtC;MAA6CtB,cAAc,EAAEkC,MAA7D;MAAqEpC,MAAM,EAAEA,MAA7E;MAAqFI,qBAAqB,EAAEA,qBAA5G;MAAmIC,IAAI,EAAEA;IAAzI,CAAnC,EAAoLhB,KAApL,CAA3C;EACH,CAxBD,EA7D6I,CAsF7I;EACA;;EACAwB,gBAAgB,GAAGA,gBAAgB,CAACU,GAAjB,CAAsBlC,KAAD,IAAW;IAC/C,MAAMC,GAAG,GAAGD,KAAK,CAACC,GAAlB;IACA,OAAOwB,OAAO,CAAC4B,GAAR,CAAYpD,GAAZ,IAAoBD,KAApB,GAA8Bd,KAAK,CAAC8C,aAAN,CAAoBtC,aAApB,EAAmC;MAAEO,GAAG,EAAEF,WAAW,CAACC,KAAD,CAAlB;MAA2BmC,SAAS,EAAE,IAAtC;MAA4CpB,qBAAqB,EAAEA,qBAAnE;MAA0FC,IAAI,EAAEA;IAAhG,CAAnC,EAA2IhB,KAA3I,CAArC;EACH,CAHkB,CAAnB;;EAIA,IAAIiB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IACAH,IAAI,KAAK,MADT,IAEAQ,gBAAgB,CAACgB,MAAjB,GAA0B,CAF9B,EAEiC;IAC7Bc,OAAO,CAACC,IAAR,CAAc,+IAAd;EACH;;EACD,OAAQrE,KAAK,CAAC8C,aAAN,CAAoB9C,KAAK,CAAC+C,QAA1B,EAAoC,IAApC,EAA0CR,OAAO,CAACmB,IAAR,GAC5CpB,gBAD4C,GAE5CA,gBAAgB,CAACU,GAAjB,CAAsBlC,KAAD,IAAWX,YAAY,CAACW,KAAD,CAA5C,CAFE,CAAR;AAGH,CApGD;;AAsGA,SAASU,eAAT"},"metadata":{},"sourceType":"module"}