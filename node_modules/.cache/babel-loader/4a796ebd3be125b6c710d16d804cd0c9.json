{"ast":null,"code":"import { easeInOut } from '../../easing/ease.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { isEasingArray, easingDefinitionToFunction } from '../utils/easing.mjs';\n\nfunction defaultEasing(values, easing) {\n  return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\n\nfunction defaultOffset(values) {\n  const numValues = values.length;\n  return values.map((_value, i) => i !== 0 ? i / (numValues - 1) : 0);\n}\n\nfunction convertOffsetToTimes(offset, duration) {\n  return offset.map(o => o * duration);\n}\n\nfunction keyframes(_ref) {\n  let {\n    keyframes: keyframeValues,\n    ease = easeInOut,\n    times,\n    duration = 300\n  } = _ref;\n  keyframeValues = [...keyframeValues];\n  /**\n   * Easing functions can be externally defined as strings. Here we convert them\n   * into actual functions.\n   */\n\n  const easingFunctions = isEasingArray(ease) ? ease.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease);\n  /**\n   * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n   * to reduce GC during animation.\n   */\n\n  const state = {\n    done: false,\n    value: keyframeValues[0]\n  };\n  /**\n   * Create a times array based on the provided 0-1 offsets\n   */\n\n  const absoluteTimes = convertOffsetToTimes( // Only use the provided offsets if they're the correct length\n  // TODO Maybe we should warn here if there's a length mismatch\n  times && times.length === keyframeValues.length ? times : defaultOffset(keyframeValues), duration);\n\n  function createInterpolator() {\n    return interpolate(absoluteTimes, keyframeValues, {\n      ease: Array.isArray(easingFunctions) ? easingFunctions : defaultEasing(keyframeValues, easingFunctions)\n    });\n  }\n\n  let interpolator = createInterpolator();\n  return {\n    next: t => {\n      state.value = interpolator(t);\n      state.done = t >= duration;\n      return state;\n    },\n    flipTarget: () => {\n      keyframeValues.reverse();\n      interpolator = createInterpolator();\n    }\n  };\n}\n\nexport { convertOffsetToTimes, defaultEasing, defaultOffset, keyframes };","map":{"version":3,"names":["easeInOut","interpolate","isEasingArray","easingDefinitionToFunction","defaultEasing","values","easing","map","splice","length","defaultOffset","numValues","_value","i","convertOffsetToTimes","offset","duration","o","keyframes","keyframeValues","ease","times","easingFunctions","state","done","value","absoluteTimes","createInterpolator","Array","isArray","interpolator","next","t","flipTarget","reverse"],"sources":["C:/Users/DEV/Downloads/Pizza Time/node_modules/framer-motion/dist/es/animation/legacy-popmotion/keyframes.mjs"],"sourcesContent":["import { easeInOut } from '../../easing/ease.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { isEasingArray, easingDefinitionToFunction } from '../utils/easing.mjs';\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction defaultOffset(values) {\n    const numValues = values.length;\n    return values.map((_value, i) => i !== 0 ? i / (numValues - 1) : 0);\n}\nfunction convertOffsetToTimes(offset, duration) {\n    return offset.map((o) => o * duration);\n}\nfunction keyframes({ keyframes: keyframeValues, ease = easeInOut, times, duration = 300, }) {\n    keyframeValues = [...keyframeValues];\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */\n    const easingFunctions = isEasingArray(ease)\n        ? ease.map(easingDefinitionToFunction)\n        : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = {\n        done: false,\n        value: keyframeValues[0],\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */\n    const absoluteTimes = convertOffsetToTimes(\n    // Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length\n        ? times\n        : defaultOffset(keyframeValues), duration);\n    function createInterpolator() {\n        return interpolate(absoluteTimes, keyframeValues, {\n            ease: Array.isArray(easingFunctions)\n                ? easingFunctions\n                : defaultEasing(keyframeValues, easingFunctions),\n        });\n    }\n    let interpolator = createInterpolator();\n    return {\n        next: (t) => {\n            state.value = interpolator(t);\n            state.done = t >= duration;\n            return state;\n        },\n        flipTarget: () => {\n            keyframeValues.reverse();\n            interpolator = createInterpolator();\n        },\n    };\n}\n\nexport { convertOffsetToTimes, defaultEasing, defaultOffset, keyframes };\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,uBAA1B;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAASC,aAAT,EAAwBC,0BAAxB,QAA0D,qBAA1D;;AAEA,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,MAA/B,EAAuC;EACnC,OAAOD,MAAM,CAACE,GAAP,CAAW,MAAMD,MAAM,IAAIN,SAA3B,EAAsCQ,MAAtC,CAA6C,CAA7C,EAAgDH,MAAM,CAACI,MAAP,GAAgB,CAAhE,CAAP;AACH;;AACD,SAASC,aAAT,CAAuBL,MAAvB,EAA+B;EAC3B,MAAMM,SAAS,GAAGN,MAAM,CAACI,MAAzB;EACA,OAAOJ,MAAM,CAACE,GAAP,CAAW,CAACK,MAAD,EAASC,CAAT,KAAeA,CAAC,KAAK,CAAN,GAAUA,CAAC,IAAIF,SAAS,GAAG,CAAhB,CAAX,GAAgC,CAA1D,CAAP;AACH;;AACD,SAASG,oBAAT,CAA8BC,MAA9B,EAAsCC,QAAtC,EAAgD;EAC5C,OAAOD,MAAM,CAACR,GAAP,CAAYU,CAAD,IAAOA,CAAC,GAAGD,QAAtB,CAAP;AACH;;AACD,SAASE,SAAT,OAA4F;EAAA,IAAzE;IAAEA,SAAS,EAAEC,cAAb;IAA6BC,IAAI,GAAGpB,SAApC;IAA+CqB,KAA/C;IAAsDL,QAAQ,GAAG;EAAjE,CAAyE;EACxFG,cAAc,GAAG,CAAC,GAAGA,cAAJ,CAAjB;EACA;AACJ;AACA;AACA;;EACI,MAAMG,eAAe,GAAGpB,aAAa,CAACkB,IAAD,CAAb,GAClBA,IAAI,CAACb,GAAL,CAASJ,0BAAT,CADkB,GAElBA,0BAA0B,CAACiB,IAAD,CAFhC;EAGA;AACJ;AACA;AACA;;EACI,MAAMG,KAAK,GAAG;IACVC,IAAI,EAAE,KADI;IAEVC,KAAK,EAAEN,cAAc,CAAC,CAAD;EAFX,CAAd;EAIA;AACJ;AACA;;EACI,MAAMO,aAAa,GAAGZ,oBAAoB,EAC1C;EACA;EACAO,KAAK,IAAIA,KAAK,CAACZ,MAAN,KAAiBU,cAAc,CAACV,MAAzC,GACMY,KADN,GAEMX,aAAa,CAACS,cAAD,CALuB,EAKLH,QALK,CAA1C;;EAMA,SAASW,kBAAT,GAA8B;IAC1B,OAAO1B,WAAW,CAACyB,aAAD,EAAgBP,cAAhB,EAAgC;MAC9CC,IAAI,EAAEQ,KAAK,CAACC,OAAN,CAAcP,eAAd,IACAA,eADA,GAEAlB,aAAa,CAACe,cAAD,EAAiBG,eAAjB;IAH2B,CAAhC,CAAlB;EAKH;;EACD,IAAIQ,YAAY,GAAGH,kBAAkB,EAArC;EACA,OAAO;IACHI,IAAI,EAAGC,CAAD,IAAO;MACTT,KAAK,CAACE,KAAN,GAAcK,YAAY,CAACE,CAAD,CAA1B;MACAT,KAAK,CAACC,IAAN,GAAaQ,CAAC,IAAIhB,QAAlB;MACA,OAAOO,KAAP;IACH,CALE;IAMHU,UAAU,EAAE,MAAM;MACdd,cAAc,CAACe,OAAf;MACAJ,YAAY,GAAGH,kBAAkB,EAAjC;IACH;EATE,CAAP;AAWH;;AAED,SAASb,oBAAT,EAA+BV,aAA/B,EAA8CM,aAA9C,EAA6DQ,SAA7D"},"metadata":{},"sourceType":"module"}