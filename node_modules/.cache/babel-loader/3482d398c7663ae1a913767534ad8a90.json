{"ast":null,"code":"import { frameData } from '../frameloop/data.mjs';\nimport { sync } from '../frameloop/index.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\n\nconst isFloat = value => {\n  return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\n\n\nclass MotionValue {\n  /**\n   * @param init - The initiating value\n   * @param config - Optional configuration options\n   *\n   * -  `transformer`: A function to transform incoming values with.\n   *\n   * @internal\n   */\n  constructor(init) {\n    var _this = this;\n\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    /**\n     * This will be replaced by the build step with the latest version number.\n     * When MotionValues are provided to motion components, warn if versions are mixed.\n     */\n    this.version = \"9.0.2\";\n    /**\n     * Duration, in milliseconds, since last updating frame.\n     *\n     * @internal\n     */\n\n    this.timeDelta = 0;\n    /**\n     * Timestamp of the last time this `MotionValue` was updated.\n     *\n     * @internal\n     */\n\n    this.lastUpdated = 0;\n    /**\n     * Tracks whether this value can output a velocity. Currently this is only true\n     * if the value is numerical, but we might be able to widen the scope here and support\n     * other value types.\n     *\n     * @internal\n     */\n\n    this.canTrackVelocity = false;\n    /**\n     * An object containing a SubscriptionManager for each active event.\n     */\n\n    this.events = {};\n\n    this.updateAndNotify = function (v) {\n      let render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      _this.prev = _this.current;\n      _this.current = v; // Update timestamp\n\n      const {\n        delta,\n        timestamp\n      } = frameData;\n\n      if (_this.lastUpdated !== timestamp) {\n        _this.timeDelta = delta;\n        _this.lastUpdated = timestamp;\n        sync.postRender(_this.scheduleVelocityCheck);\n      } // Update update subscribers\n\n\n      if (_this.prev !== _this.current && _this.events.change) {\n        _this.events.change.notify(_this.current);\n      } // Update velocity subscribers\n\n\n      if (_this.events.velocityChange) {\n        _this.events.velocityChange.notify(_this.getVelocity());\n      } // Update render subscribers\n\n\n      if (render && _this.events.renderRequest) {\n        _this.events.renderRequest.notify(_this.current);\n      }\n    };\n    /**\n     * Schedule a velocity check for the next frame.\n     *\n     * This is an instanced and bound function to prevent generating a new\n     * function once per frame.\n     *\n     * @internal\n     */\n\n\n    this.scheduleVelocityCheck = () => sync.postRender(this.velocityCheck);\n    /**\n     * Updates `prev` with `current` if the value hasn't been updated this frame.\n     * This ensures velocity calculations return `0`.\n     *\n     * This is an instanced and bound function to prevent generating a new\n     * function once per frame.\n     *\n     * @internal\n     */\n\n\n    this.velocityCheck = _ref => {\n      let {\n        timestamp\n      } = _ref;\n\n      if (timestamp !== this.lastUpdated) {\n        this.prev = this.current;\n\n        if (this.events.velocityChange) {\n          this.events.velocityChange.notify(this.getVelocity());\n        }\n      }\n    };\n\n    this.hasAnimated = false;\n    this.prev = this.current = init;\n    this.canTrackVelocity = isFloat(this.current);\n    this.owner = options.owner;\n  }\n  /**\n   * Adds a function that will be notified when the `MotionValue` is updated.\n   *\n   * It returns a function that, when called, will cancel the subscription.\n   *\n   * When calling `onChange` inside a React component, it should be wrapped with the\n   * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n   * from the `useEffect` function to ensure you don't add duplicate subscribers..\n   *\n   * ```jsx\n   * export const MyComponent = () => {\n   *   const x = useMotionValue(0)\n   *   const y = useMotionValue(0)\n   *   const opacity = useMotionValue(1)\n   *\n   *   useEffect(() => {\n   *     function updateOpacity() {\n   *       const maxXY = Math.max(x.get(), y.get())\n   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n   *       opacity.set(newOpacity)\n   *     }\n   *\n   *     const unsubscribeX = x.on(\"change\", updateOpacity)\n   *     const unsubscribeY = y.on(\"change\", updateOpacity)\n   *\n   *     return () => {\n   *       unsubscribeX()\n   *       unsubscribeY()\n   *     }\n   *   }, [])\n   *\n   *   return <motion.div style={{ x }} />\n   * }\n   * ```\n   *\n   * @param subscriber - A function that receives the latest value.\n   * @returns A function that, when called, will cancel this subscription.\n   *\n   * @deprecated\n   */\n\n\n  onChange(subscription) {\n    return this.on(\"change\", subscription);\n  }\n\n  on(eventName, callback) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = new SubscriptionManager();\n    }\n\n    const unsubscribe = this.events[eventName].add(callback);\n\n    if (eventName === \"change\") {\n      return () => {\n        unsubscribe();\n        /**\n         * If we have no more change listeners by the start\n         * of the next frame, stop active animations.\n         */\n\n        sync.read(() => {\n          if (!this.events.change.getSize()) {\n            this.stop();\n          }\n        });\n      };\n    }\n\n    return unsubscribe;\n  }\n\n  clearListeners() {\n    for (const eventManagers in this.events) {\n      this.events[eventManagers].clear();\n    }\n  }\n  /**\n   * Attaches a passive effect to the `MotionValue`.\n   *\n   * @internal\n   */\n\n\n  attach(passiveEffect, stopPassiveEffect) {\n    this.passiveEffect = passiveEffect;\n    this.stopPassiveEffect = stopPassiveEffect;\n  }\n  /**\n   * Sets the state of the `MotionValue`.\n   *\n   * @remarks\n   *\n   * ```jsx\n   * const x = useMotionValue(0)\n   * x.set(10)\n   * ```\n   *\n   * @param latest - Latest value to set.\n   * @param render - Whether to notify render subscribers. Defaults to `true`\n   *\n   * @public\n   */\n\n\n  set(v) {\n    let render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (!render || !this.passiveEffect) {\n      this.updateAndNotify(v, render);\n    } else {\n      this.passiveEffect(v, this.updateAndNotify);\n    }\n  }\n\n  setWithVelocity(prev, current, delta) {\n    this.set(current);\n    this.prev = prev;\n    this.timeDelta = delta;\n  }\n  /**\n   * Set the state of the `MotionValue`, stopping any active animations,\n   * effects, and resets velocity to `0`.\n   */\n\n\n  jump(v) {\n    this.updateAndNotify(v);\n    this.prev = v;\n    this.stop();\n    if (this.stopPassiveEffect) this.stopPassiveEffect();\n  }\n  /**\n   * Returns the latest state of `MotionValue`\n   *\n   * @returns - The latest state of `MotionValue`\n   *\n   * @public\n   */\n\n\n  get() {\n    return this.current;\n  }\n  /**\n   * @public\n   */\n\n\n  getPrevious() {\n    return this.prev;\n  }\n  /**\n   * Returns the latest velocity of `MotionValue`\n   *\n   * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n   *\n   * @public\n   */\n\n\n  getVelocity() {\n    // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n    return this.canTrackVelocity ? // These casts could be avoided if parseFloat would be typed better\n    velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;\n  }\n  /**\n   * Registers a new animation to control this `MotionValue`. Only one\n   * animation can drive a `MotionValue` at one time.\n   *\n   * ```jsx\n   * value.start()\n   * ```\n   *\n   * @param animation - A function that starts the provided animation\n   *\n   * @internal\n   */\n\n\n  start(startAnimation) {\n    this.stop();\n    return new Promise(resolve => {\n      this.hasAnimated = true;\n      this.animation = startAnimation(resolve) || null;\n\n      if (this.events.animationStart) {\n        this.events.animationStart.notify();\n      }\n    }).then(() => {\n      if (this.events.animationComplete) {\n        this.events.animationComplete.notify();\n      }\n\n      this.clearAnimation();\n    });\n  }\n  /**\n   * Stop the currently active animation.\n   *\n   * @public\n   */\n\n\n  stop() {\n    if (this.animation) {\n      this.animation.stop();\n\n      if (this.events.animationCancel) {\n        this.events.animationCancel.notify();\n      }\n    }\n\n    this.clearAnimation();\n  }\n  /**\n   * Returns `true` if this value is currently animating.\n   *\n   * @public\n   */\n\n\n  isAnimating() {\n    return !!this.animation;\n  }\n\n  clearAnimation() {\n    this.animation = null;\n  }\n  /**\n   * Destroy and clean up subscribers to this `MotionValue`.\n   *\n   * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n   * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n   * created a `MotionValue` via the `motionValue` function.\n   *\n   * @public\n   */\n\n\n  destroy() {\n    this.clearListeners();\n    this.stop();\n\n    if (this.stopPassiveEffect) {\n      this.stopPassiveEffect();\n    }\n  }\n\n}\n\nfunction motionValue(init, options) {\n  return new MotionValue(init, options);\n}\n\nexport { MotionValue, motionValue };","map":{"version":3,"names":["frameData","sync","SubscriptionManager","velocityPerSecond","isFloat","value","isNaN","parseFloat","MotionValue","constructor","init","options","version","timeDelta","lastUpdated","canTrackVelocity","events","updateAndNotify","v","render","prev","current","delta","timestamp","postRender","scheduleVelocityCheck","change","notify","velocityChange","getVelocity","renderRequest","velocityCheck","hasAnimated","owner","onChange","subscription","on","eventName","callback","unsubscribe","add","read","getSize","stop","clearListeners","eventManagers","clear","attach","passiveEffect","stopPassiveEffect","set","setWithVelocity","jump","get","getPrevious","start","startAnimation","Promise","resolve","animation","animationStart","then","animationComplete","clearAnimation","animationCancel","isAnimating","destroy","motionValue"],"sources":["C:/Users/DEV/Desktop/Projects/Pizza_Fun/node_modules/framer-motion/dist/es/value/index.mjs"],"sourcesContent":["import { frameData } from '../frameloop/data.mjs';\nimport { sync } from '../frameloop/index.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\n\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    constructor(init, options = {}) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"9.0.2\";\n        /**\n         * Duration, in milliseconds, since last updating frame.\n         *\n         * @internal\n         */\n        this.timeDelta = 0;\n        /**\n         * Timestamp of the last time this `MotionValue` was updated.\n         *\n         * @internal\n         */\n        this.lastUpdated = 0;\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = false;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        this.updateAndNotify = (v, render = true) => {\n            this.prev = this.current;\n            this.current = v;\n            // Update timestamp\n            const { delta, timestamp } = frameData;\n            if (this.lastUpdated !== timestamp) {\n                this.timeDelta = delta;\n                this.lastUpdated = timestamp;\n                sync.postRender(this.scheduleVelocityCheck);\n            }\n            // Update update subscribers\n            if (this.prev !== this.current && this.events.change) {\n                this.events.change.notify(this.current);\n            }\n            // Update velocity subscribers\n            if (this.events.velocityChange) {\n                this.events.velocityChange.notify(this.getVelocity());\n            }\n            // Update render subscribers\n            if (render && this.events.renderRequest) {\n                this.events.renderRequest.notify(this.current);\n            }\n        };\n        /**\n         * Schedule a velocity check for the next frame.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.scheduleVelocityCheck = () => sync.postRender(this.velocityCheck);\n        /**\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\n         * This ensures velocity calculations return `0`.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.velocityCheck = ({ timestamp }) => {\n            if (timestamp !== this.lastUpdated) {\n                this.prev = this.current;\n                if (this.events.velocityChange) {\n                    this.events.velocityChange.notify(this.getVelocity());\n                }\n            }\n        };\n        this.hasAnimated = false;\n        this.prev = this.current = init;\n        this.canTrackVelocity = isFloat(this.current);\n        this.owner = options.owner;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n    onChange(subscription) {\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return () => {\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */\n                sync.read(() => {\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for (const eventManagers in this.events) {\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = prev;\n        this.timeDelta = delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n    jump(v) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.stop();\n        if (this.stopPassiveEffect)\n            this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n        return this.canTrackVelocity\n            ? // These casts could be avoided if parseFloat would be typed better\n                velocityPerSecond(parseFloat(this.current) -\n                    parseFloat(this.prev), this.timeDelta)\n            : 0;\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    start(startAnimation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve) || null;\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(() => {\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        this.animation = null;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\nexport { MotionValue, motionValue };\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,uBAA1B;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,mBAAT,QAAoC,mCAApC;AACA,SAASC,iBAAT,QAAkC,kCAAlC;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;EACvB,OAAO,CAACC,KAAK,CAACC,UAAU,CAACF,KAAD,CAAX,CAAb;AACH,CAFD;AAGA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,WAAN,CAAkB;EACd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACC,IAAD,EAAqB;IAAA;;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IAC5B;AACR;AACA;AACA;IACQ,KAAKC,OAAL,GAAe,OAAf;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,SAAL,GAAiB,CAAjB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,WAAL,GAAmB,CAAnB;IACA;AACR;AACA;AACA;AACA;AACA;AACA;;IACQ,KAAKC,gBAAL,GAAwB,KAAxB;IACA;AACR;AACA;;IACQ,KAAKC,MAAL,GAAc,EAAd;;IACA,KAAKC,eAAL,GAAuB,UAACC,CAAD,EAAsB;MAAA,IAAlBC,MAAkB,uEAAT,IAAS;MACzC,KAAI,CAACC,IAAL,GAAY,KAAI,CAACC,OAAjB;MACA,KAAI,CAACA,OAAL,GAAeH,CAAf,CAFyC,CAGzC;;MACA,MAAM;QAAEI,KAAF;QAASC;MAAT,IAAuBvB,SAA7B;;MACA,IAAI,KAAI,CAACc,WAAL,KAAqBS,SAAzB,EAAoC;QAChC,KAAI,CAACV,SAAL,GAAiBS,KAAjB;QACA,KAAI,CAACR,WAAL,GAAmBS,SAAnB;QACAtB,IAAI,CAACuB,UAAL,CAAgB,KAAI,CAACC,qBAArB;MACH,CATwC,CAUzC;;;MACA,IAAI,KAAI,CAACL,IAAL,KAAc,KAAI,CAACC,OAAnB,IAA8B,KAAI,CAACL,MAAL,CAAYU,MAA9C,EAAsD;QAClD,KAAI,CAACV,MAAL,CAAYU,MAAZ,CAAmBC,MAAnB,CAA0B,KAAI,CAACN,OAA/B;MACH,CAbwC,CAczC;;;MACA,IAAI,KAAI,CAACL,MAAL,CAAYY,cAAhB,EAAgC;QAC5B,KAAI,CAACZ,MAAL,CAAYY,cAAZ,CAA2BD,MAA3B,CAAkC,KAAI,CAACE,WAAL,EAAlC;MACH,CAjBwC,CAkBzC;;;MACA,IAAIV,MAAM,IAAI,KAAI,CAACH,MAAL,CAAYc,aAA1B,EAAyC;QACrC,KAAI,CAACd,MAAL,CAAYc,aAAZ,CAA0BH,MAA1B,CAAiC,KAAI,CAACN,OAAtC;MACH;IACJ,CAtBD;IAuBA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQ,KAAKI,qBAAL,GAA6B,MAAMxB,IAAI,CAACuB,UAAL,CAAgB,KAAKO,aAArB,CAAnC;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQ,KAAKA,aAAL,GAAqB,QAAmB;MAAA,IAAlB;QAAER;MAAF,CAAkB;;MACpC,IAAIA,SAAS,KAAK,KAAKT,WAAvB,EAAoC;QAChC,KAAKM,IAAL,GAAY,KAAKC,OAAjB;;QACA,IAAI,KAAKL,MAAL,CAAYY,cAAhB,EAAgC;UAC5B,KAAKZ,MAAL,CAAYY,cAAZ,CAA2BD,MAA3B,CAAkC,KAAKE,WAAL,EAAlC;QACH;MACJ;IACJ,CAPD;;IAQA,KAAKG,WAAL,GAAmB,KAAnB;IACA,KAAKZ,IAAL,GAAY,KAAKC,OAAL,GAAeX,IAA3B;IACA,KAAKK,gBAAL,GAAwBX,OAAO,CAAC,KAAKiB,OAAN,CAA/B;IACA,KAAKY,KAAL,GAAatB,OAAO,CAACsB,KAArB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIC,QAAQ,CAACC,YAAD,EAAe;IACnB,OAAO,KAAKC,EAAL,CAAQ,QAAR,EAAkBD,YAAlB,CAAP;EACH;;EACDC,EAAE,CAACC,SAAD,EAAYC,QAAZ,EAAsB;IACpB,IAAI,CAAC,KAAKtB,MAAL,CAAYqB,SAAZ,CAAL,EAA6B;MACzB,KAAKrB,MAAL,CAAYqB,SAAZ,IAAyB,IAAInC,mBAAJ,EAAzB;IACH;;IACD,MAAMqC,WAAW,GAAG,KAAKvB,MAAL,CAAYqB,SAAZ,EAAuBG,GAAvB,CAA2BF,QAA3B,CAApB;;IACA,IAAID,SAAS,KAAK,QAAlB,EAA4B;MACxB,OAAO,MAAM;QACTE,WAAW;QACX;AAChB;AACA;AACA;;QACgBtC,IAAI,CAACwC,IAAL,CAAU,MAAM;UACZ,IAAI,CAAC,KAAKzB,MAAL,CAAYU,MAAZ,CAAmBgB,OAAnB,EAAL,EAAmC;YAC/B,KAAKC,IAAL;UACH;QACJ,CAJD;MAKH,CAXD;IAYH;;IACD,OAAOJ,WAAP;EACH;;EACDK,cAAc,GAAG;IACb,KAAK,MAAMC,aAAX,IAA4B,KAAK7B,MAAjC,EAAyC;MACrC,KAAKA,MAAL,CAAY6B,aAAZ,EAA2BC,KAA3B;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;;;EACIC,MAAM,CAACC,aAAD,EAAgBC,iBAAhB,EAAmC;IACrC,KAAKD,aAAL,GAAqBA,aAArB;IACA,KAAKC,iBAAL,GAAyBA,iBAAzB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIC,GAAG,CAAChC,CAAD,EAAmB;IAAA,IAAfC,MAAe,uEAAN,IAAM;;IAClB,IAAI,CAACA,MAAD,IAAW,CAAC,KAAK6B,aAArB,EAAoC;MAChC,KAAK/B,eAAL,CAAqBC,CAArB,EAAwBC,MAAxB;IACH,CAFD,MAGK;MACD,KAAK6B,aAAL,CAAmB9B,CAAnB,EAAsB,KAAKD,eAA3B;IACH;EACJ;;EACDkC,eAAe,CAAC/B,IAAD,EAAOC,OAAP,EAAgBC,KAAhB,EAAuB;IAClC,KAAK4B,GAAL,CAAS7B,OAAT;IACA,KAAKD,IAAL,GAAYA,IAAZ;IACA,KAAKP,SAAL,GAAiBS,KAAjB;EACH;EACD;AACJ;AACA;AACA;;;EACI8B,IAAI,CAAClC,CAAD,EAAI;IACJ,KAAKD,eAAL,CAAqBC,CAArB;IACA,KAAKE,IAAL,GAAYF,CAAZ;IACA,KAAKyB,IAAL;IACA,IAAI,KAAKM,iBAAT,EACI,KAAKA,iBAAL;EACP;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACII,GAAG,GAAG;IACF,OAAO,KAAKhC,OAAZ;EACH;EACD;AACJ;AACA;;;EACIiC,WAAW,GAAG;IACV,OAAO,KAAKlC,IAAZ;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIS,WAAW,GAAG;IACV;IACA,OAAO,KAAKd,gBAAL,GACD;IACEZ,iBAAiB,CAACI,UAAU,CAAC,KAAKc,OAAN,CAAV,GACdd,UAAU,CAAC,KAAKa,IAAN,CADG,EACU,KAAKP,SADf,CAFlB,GAID,CAJN;EAKH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI0C,KAAK,CAACC,cAAD,EAAiB;IAClB,KAAKb,IAAL;IACA,OAAO,IAAIc,OAAJ,CAAaC,OAAD,IAAa;MAC5B,KAAK1B,WAAL,GAAmB,IAAnB;MACA,KAAK2B,SAAL,GAAiBH,cAAc,CAACE,OAAD,CAAd,IAA2B,IAA5C;;MACA,IAAI,KAAK1C,MAAL,CAAY4C,cAAhB,EAAgC;QAC5B,KAAK5C,MAAL,CAAY4C,cAAZ,CAA2BjC,MAA3B;MACH;IACJ,CANM,EAMJkC,IANI,CAMC,MAAM;MACV,IAAI,KAAK7C,MAAL,CAAY8C,iBAAhB,EAAmC;QAC/B,KAAK9C,MAAL,CAAY8C,iBAAZ,CAA8BnC,MAA9B;MACH;;MACD,KAAKoC,cAAL;IACH,CAXM,CAAP;EAYH;EACD;AACJ;AACA;AACA;AACA;;;EACIpB,IAAI,GAAG;IACH,IAAI,KAAKgB,SAAT,EAAoB;MAChB,KAAKA,SAAL,CAAehB,IAAf;;MACA,IAAI,KAAK3B,MAAL,CAAYgD,eAAhB,EAAiC;QAC7B,KAAKhD,MAAL,CAAYgD,eAAZ,CAA4BrC,MAA5B;MACH;IACJ;;IACD,KAAKoC,cAAL;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIE,WAAW,GAAG;IACV,OAAO,CAAC,CAAC,KAAKN,SAAd;EACH;;EACDI,cAAc,GAAG;IACb,KAAKJ,SAAL,GAAiB,IAAjB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIO,OAAO,GAAG;IACN,KAAKtB,cAAL;IACA,KAAKD,IAAL;;IACA,IAAI,KAAKM,iBAAT,EAA4B;MACxB,KAAKA,iBAAL;IACH;EACJ;;AApTa;;AAsTlB,SAASkB,WAAT,CAAqBzD,IAArB,EAA2BC,OAA3B,EAAoC;EAChC,OAAO,IAAIH,WAAJ,CAAgBE,IAAhB,EAAsBC,OAAtB,CAAP;AACH;;AAED,SAASH,WAAT,EAAsB2D,WAAtB"},"metadata":{},"sourceType":"module"}