{"ast":null,"code":"import { cancelSync, flushSync, sync } from '../../frameloop/index.mjs';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\n\nconst animationTarget = 1000;\nlet id = 0;\n\nfunction createProjectionNode(_ref) {\n  let {\n    attachResizeListener,\n    defaultParent,\n    measureScroll,\n    checkIsScrollRoot,\n    resetTransform\n  } = _ref;\n  return class ProjectionNode {\n    constructor(elementId) {\n      let latestValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      let parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n\n      /**\n       * A unique ID generated for every projection node.\n       */\n      this.id = id++;\n      /**\n       * An id that represents a unique session instigated by startUpdate.\n       */\n\n      this.animationId = 0;\n      /**\n       * A Set containing all this component's children. This is used to iterate\n       * through the children.\n       *\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\n       */\n\n      this.children = new Set();\n      /**\n       * Options for the node. We use this to configure what kind of layout animations\n       * we should perform (if any).\n       */\n\n      this.options = {};\n      /**\n       * We use this to detect when its safe to shut down part of a projection tree.\n       * We have to keep projecting children for scale correction and relative projection\n       * until all their parents stop performing layout animations.\n       */\n\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\n       * Flag to true if we think this layout has been changed. We can't always know this,\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n       * and if one node is dirtied, they all are.\n       */\n\n      this.isLayoutDirty = false;\n      this.isTransformDirty = false;\n      /**\n       * Flag to true if we think the projection calculations for this or any\n       * child might need recalculating as a result of an updated transform or layout animation.\n       */\n\n      this.isProjectionDirty = false;\n      /**\n       * Block layout updates for instant layout transitions throughout the tree.\n       */\n\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n       * call.\n       */\n\n      this.isUpdating = false;\n      /**\n       * If this is an SVG element we currently disable projection transforms\n       */\n\n      this.isSVG = false;\n      /**\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n       * its projection styles.\n       */\n\n      this.needsReset = false;\n      /**\n       * Flags whether this node should have its transform reset prior to measuring.\n       */\n\n      this.shouldResetTransform = false;\n      /**\n       * An object representing the calculated contextual/accumulated/tree scale.\n       * This will be used to scale calculcated projection transforms, as these are\n       * calculated in screen-space but need to be scaled for elements to layoutly\n       * make it to their calculated destinations.\n       *\n       * TODO: Lazy-init\n       */\n\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\n       *\n       */\n\n      this.eventHandlers = new Map(); // Note: Currently only running on root node\n\n      this.potentialNodes = new Map();\n\n      this.checkUpdateFailed = () => {\n        if (this.isUpdating) {\n          this.isUpdating = false;\n          this.clearAllSnapshots();\n        }\n      };\n      /**\n       * This is a multi-step process as shared nodes might be of different depths. Nodes\n       * are sorted by depth order, so we need to resolve the entire tree before moving to\n       * the next step.\n       */\n\n\n      this.updateProjection = () => {\n        this.nodes.forEach(propagateDirtyNodes);\n        this.nodes.forEach(resolveTargetDelta);\n        this.nodes.forEach(calcProjection);\n      };\n\n      this.hasProjected = false;\n      this.isVisible = true;\n      this.animationProgress = 0;\n      /**\n       * Shared layout\n       */\n      // TODO Only running on root node\n\n      this.sharedNodes = new Map();\n      this.elementId = elementId;\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? [...parent.path, parent] : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n      elementId && this.root.registerPotentialNode(elementId, this);\n\n      for (let i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n\n    addEventListener(name, handler) {\n      if (!this.eventHandlers.has(name)) {\n        this.eventHandlers.set(name, new SubscriptionManager());\n      }\n\n      return this.eventHandlers.get(name).add(handler);\n    }\n\n    notifyListeners(name) {\n      const subscriptionManager = this.eventHandlers.get(name);\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify(...args);\n    }\n\n    hasListeners(name) {\n      return this.eventHandlers.has(name);\n    }\n\n    registerPotentialNode(elementId, node) {\n      this.potentialNodes.set(elementId, node);\n    }\n    /**\n     * Lifecycles\n     */\n\n\n    mount(instance) {\n      let isLayoutDirty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var _a;\n\n      if (this.instance) return;\n      this.isSVG = instance instanceof SVGElement && instance.tagName !== \"svg\";\n      this.instance = instance;\n      const {\n        layoutId,\n        layout,\n        visualElement\n      } = this.options;\n\n      if (visualElement && !visualElement.current) {\n        visualElement.mount(instance);\n      }\n\n      this.root.nodes.add(this);\n      (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n      this.elementId && this.root.potentialNodes.delete(this.elementId);\n\n      if (isLayoutDirty && (layout || layoutId)) {\n        this.isLayoutDirty = true;\n      }\n\n      if (attachResizeListener) {\n        let cancelDelay;\n\n        const resizeUnblockUpdate = () => this.root.updateBlockedByResize = false;\n\n        attachResizeListener(instance, () => {\n          this.root.updateBlockedByResize = true;\n          cancelDelay && cancelDelay();\n          cancelDelay = delay(resizeUnblockUpdate, 250);\n\n          if (globalProjectionState.hasAnimatedSinceResize) {\n            globalProjectionState.hasAnimatedSinceResize = false;\n            this.nodes.forEach(finishAnimation);\n          }\n        });\n      }\n\n      if (layoutId) {\n        this.root.registerSharedNode(layoutId, this);\n      } // Only register the handler if it requires layout animation\n\n\n      if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n        this.addEventListener(\"didUpdate\", _ref2 => {\n          let {\n            delta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n            layout: newLayout\n          } = _ref2;\n\n          var _a, _b, _c, _d, _e;\n\n          if (this.isTreeAnimationBlocked()) {\n            this.target = undefined;\n            this.relativeTarget = undefined;\n            return;\n          } // TODO: Check here if an animation exists\n\n\n          const layoutTransition = (_b = (_a = this.options.transition) !== null && _a !== void 0 ? _a : visualElement.getDefaultTransition()) !== null && _b !== void 0 ? _b : defaultLayoutTransition;\n          const {\n            onLayoutAnimationStart,\n            onLayoutAnimationComplete\n          } = visualElement.getProps();\n          /**\n           * The target layout of the element might stay the same,\n           * but its position relative to its parent has changed.\n           */\n\n          const targetChanged = !this.targetLayout || !boxEquals(this.targetLayout, newLayout) || hasRelativeTargetChanged;\n          /**\n           * If the layout hasn't seemed to have changed, it might be that the\n           * element is visually in the same place in the document but its position\n           * relative to its parent has indeed changed. So here we check for that.\n           */\n\n          const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n\n          if (this.options.layoutRoot || ((_c = this.resumeFrom) === null || _c === void 0 ? void 0 : _c.instance) || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {\n            if (this.resumeFrom) {\n              this.resumingFrom = this.resumeFrom;\n              this.resumingFrom.resumingFrom = undefined;\n            }\n\n            this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n            const animationOptions = { ...getValueTransition(layoutTransition, \"layout\"),\n              onPlay: onLayoutAnimationStart,\n              onComplete: onLayoutAnimationComplete\n            };\n\n            if (visualElement.shouldReduceMotion || this.options.layoutRoot) {\n              animationOptions.delay = 0;\n              animationOptions.type = false;\n            }\n\n            this.startAnimation(animationOptions);\n          } else {\n            /**\n             * If the layout hasn't changed and we have an animation that hasn't started yet,\n             * finish it immediately. Otherwise it will be animating from a location\n             * that was probably never commited to screen and look like a jumpy box.\n             */\n            if (!hasLayoutChanged && this.animationProgress === 0) {\n              finishAnimation(this);\n            }\n\n            this.isLead() && ((_e = (_d = this.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d));\n          }\n\n          this.targetLayout = newLayout;\n        });\n      }\n    }\n\n    unmount() {\n      var _a, _b;\n\n      this.options.layoutId && this.willUpdate();\n      this.root.nodes.remove(this);\n      (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n      (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n      this.instance = undefined;\n      cancelSync.preRender(this.updateProjection);\n    } // only on the root\n\n\n    blockUpdate() {\n      this.updateManuallyBlocked = true;\n    }\n\n    unblockUpdate() {\n      this.updateManuallyBlocked = false;\n    }\n\n    isUpdateBlocked() {\n      return this.updateManuallyBlocked || this.updateBlockedByResize;\n    }\n\n    isTreeAnimationBlocked() {\n      var _a;\n\n      return this.isAnimationBlocked || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) || false;\n    } // Note: currently only running on root node\n\n\n    startUpdate() {\n      var _a;\n\n      if (this.isUpdateBlocked()) return;\n      this.isUpdating = true;\n      (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n      this.animationId++;\n    }\n\n    getTransformTemplate() {\n      var _a;\n\n      return (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n    }\n\n    willUpdate() {\n      let shouldNotifyListeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      var _a, _b, _c;\n\n      if (this.root.isUpdateBlocked()) {\n        (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n        return;\n      }\n\n      !this.root.isUpdating && this.root.startUpdate();\n      if (this.isLayoutDirty) return;\n      this.isLayoutDirty = true;\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        node.shouldResetTransform = true;\n        node.updateScroll(\"snapshot\");\n\n        if (node.options.layoutRoot) {\n          node.willUpdate(false);\n        }\n      }\n\n      const {\n        layoutId,\n        layout\n      } = this.options;\n      if (layoutId === undefined && !layout) return;\n      this.prevTransformTemplateValue = (_c = this.getTransformTemplate()) === null || _c === void 0 ? void 0 : _c(this.latestValues, \"\");\n      this.updateSnapshot();\n      shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n    } // Note: Currently only running on root node\n\n\n    didUpdate() {\n      const updateWasBlocked = this.isUpdateBlocked(); // When doing an instant transition, we skip the layout update,\n      // but should still clean up the measurements so that the next\n      // snapshot could be taken correctly.\n\n      if (updateWasBlocked) {\n        this.unblockUpdate();\n        this.clearAllSnapshots();\n        this.nodes.forEach(clearMeasurements);\n        return;\n      }\n\n      if (!this.isUpdating) return;\n      this.isUpdating = false;\n      /**\n       * Search for and mount newly-added projection elements.\n       *\n       * TODO: Every time a new component is rendered we could search up the tree for\n       * the closest mounted node and query from there rather than document.\n       */\n\n      if (this.potentialNodes.size) {\n        this.potentialNodes.forEach(mountNodeEarly);\n        this.potentialNodes.clear();\n      }\n      /**\n       * Write\n       */\n\n\n      this.nodes.forEach(resetTransformStyle);\n      /**\n       * Read ==================\n       */\n      // Update layout measurements of updated children\n\n      this.nodes.forEach(updateLayout);\n      /**\n       * Write\n       */\n      // Notify listeners that the layout is updated\n\n      this.nodes.forEach(notifyLayoutUpdate);\n      this.clearAllSnapshots(); // Flush any scheduled updates\n\n      flushSync.update();\n      flushSync.preRender();\n      flushSync.render();\n    }\n\n    clearAllSnapshots() {\n      this.nodes.forEach(clearSnapshot);\n      this.sharedNodes.forEach(removeLeadSnapshots);\n    }\n\n    scheduleUpdateProjection() {\n      sync.preRender(this.updateProjection, false, true);\n    }\n\n    scheduleCheckAfterUnmount() {\n      /**\n       * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n       * we manually call didUpdate to give a chance to the siblings to animate.\n       * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n       */\n      sync.postRender(() => {\n        if (this.isLayoutDirty) {\n          this.root.didUpdate();\n        } else {\n          this.root.checkUpdateFailed();\n        }\n      });\n    }\n    /**\n     * Update measurements\n     */\n\n\n    updateSnapshot() {\n      if (this.snapshot || !this.instance) return;\n      this.snapshot = this.measure();\n    }\n\n    updateLayout() {\n      var _a;\n\n      if (!this.instance) return; // TODO: Incorporate into a forwarded scroll offset\n\n      this.updateScroll();\n\n      if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n        return;\n      }\n      /**\n       * When a node is mounted, it simply resumes from the prevLead's\n       * snapshot instead of taking a new one, but the ancestors scroll\n       * might have updated while the prevLead is unmounted. We need to\n       * update the scroll again to make sure the layout we measure is\n       * up to date.\n       */\n\n\n      if (this.resumeFrom && !this.resumeFrom.instance) {\n        for (let i = 0; i < this.path.length; i++) {\n          const node = this.path[i];\n          node.updateScroll();\n        }\n      }\n\n      const prevLayout = this.layout;\n      this.layout = this.measure(false);\n      this.layoutCorrected = createBox();\n      this.isLayoutDirty = false;\n      this.projectionDelta = undefined;\n      this.notifyListeners(\"measure\", this.layout.layoutBox);\n      (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.layoutBox);\n    }\n\n    updateScroll() {\n      let phase = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"measure\";\n      let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n\n      if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {\n        needsMeasurement = false;\n      }\n\n      if (needsMeasurement) {\n        this.scroll = {\n          animationId: this.root.animationId,\n          phase,\n          isRoot: checkIsScrollRoot(this.instance),\n          offset: measureScroll(this.instance)\n        };\n      }\n    }\n\n    resetTransform() {\n      var _a;\n\n      if (!resetTransform) return;\n      const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n      const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n      const transformTemplateValue = (_a = this.getTransformTemplate()) === null || _a === void 0 ? void 0 : _a(this.latestValues, \"\");\n      const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n\n      if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n        resetTransform(this.instance, transformTemplateValue);\n        this.shouldResetTransform = false;\n        this.scheduleRender();\n      }\n    }\n\n    measure() {\n      let removeTransform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      const pageBox = this.measurePageBox();\n      let layoutBox = this.removeElementScroll(pageBox);\n      /**\n       * Measurements taken during the pre-render stage\n       * still have transforms applied so we remove them\n       * via calculation.\n       */\n\n      if (removeTransform) {\n        layoutBox = this.removeTransform(layoutBox);\n      }\n\n      roundBox(layoutBox);\n      return {\n        animationId: this.root.animationId,\n        measuredBox: pageBox,\n        layoutBox,\n        latestValues: {},\n        source: this.id\n      };\n    }\n\n    measurePageBox() {\n      const {\n        visualElement\n      } = this.options;\n      if (!visualElement) return createBox();\n      const box = visualElement.measureViewportBox(); // Remove viewport scroll to give page-relative coordinates\n\n      const {\n        scroll\n      } = this.root;\n\n      if (scroll) {\n        translateAxis(box.x, scroll.offset.x);\n        translateAxis(box.y, scroll.offset.y);\n      }\n\n      return box;\n    }\n\n    removeElementScroll(box) {\n      const boxWithoutScroll = createBox();\n      copyBoxInto(boxWithoutScroll, box);\n      /**\n       * Performance TODO: Keep a cumulative scroll offset down the tree\n       * rather than loop back up the path.\n       */\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        const {\n          scroll,\n          options\n        } = node;\n\n        if (node !== this.root && scroll && options.layoutScroll) {\n          /**\n           * If this is a new scroll root, we want to remove all previous scrolls\n           * from the viewport box.\n           */\n          if (scroll.isRoot) {\n            copyBoxInto(boxWithoutScroll, box);\n            const {\n              scroll: rootScroll\n            } = this.root;\n            /**\n             * Undo the application of page scroll that was originally added\n             * to the measured bounding box.\n             */\n\n            if (rootScroll) {\n              translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n              translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n            }\n          }\n\n          translateAxis(boxWithoutScroll.x, scroll.offset.x);\n          translateAxis(boxWithoutScroll.y, scroll.offset.y);\n        }\n      }\n\n      return boxWithoutScroll;\n    }\n\n    applyTransform(box) {\n      let transformOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const withTransforms = createBox();\n      copyBoxInto(withTransforms, box);\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n\n        if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n          transformBox(withTransforms, {\n            x: -node.scroll.offset.x,\n            y: -node.scroll.offset.y\n          });\n        }\n\n        if (!hasTransform(node.latestValues)) continue;\n        transformBox(withTransforms, node.latestValues);\n      }\n\n      if (hasTransform(this.latestValues)) {\n        transformBox(withTransforms, this.latestValues);\n      }\n\n      return withTransforms;\n    }\n\n    removeTransform(box) {\n      var _a;\n\n      const boxWithoutTransform = createBox();\n      copyBoxInto(boxWithoutTransform, box);\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        if (!node.instance) continue;\n        if (!hasTransform(node.latestValues)) continue;\n        hasScale(node.latestValues) && node.updateSnapshot();\n        const sourceBox = createBox();\n        const nodeBox = node.measurePageBox();\n        copyBoxInto(sourceBox, nodeBox);\n        removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layoutBox, sourceBox);\n      }\n\n      if (hasTransform(this.latestValues)) {\n        removeBoxTransforms(boxWithoutTransform, this.latestValues);\n      }\n\n      return boxWithoutTransform;\n    }\n    /**\n     *\n     */\n\n\n    setTargetDelta(delta) {\n      this.targetDelta = delta;\n      this.isProjectionDirty = true;\n      this.root.scheduleUpdateProjection();\n    }\n\n    setOptions(options) {\n      this.options = { ...this.options,\n        ...options,\n        crossfade: options.crossfade !== undefined ? options.crossfade : true\n      };\n    }\n\n    clearMeasurements() {\n      this.scroll = undefined;\n      this.layout = undefined;\n      this.snapshot = undefined;\n      this.prevTransformTemplateValue = undefined;\n      this.targetDelta = undefined;\n      this.target = undefined;\n      this.isLayoutDirty = false;\n    }\n    /**\n     * Frame calculations\n     */\n\n\n    resolveTargetDelta() {\n      var _a;\n      /**\n       * Once the dirty status of nodes has been spread through the tree, we also\n       * need to check if we have a shared node of a different depth that has itself\n       * been dirtied.\n       */\n\n\n      const lead = this.getLead();\n      this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n      this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n      /**\n       * We don't use transform for this step of processing so we don't\n       * need to check whether any nodes have changed transform.\n       */\n\n      if (!this.isProjectionDirty && !this.attemptToResolveRelativeTarget) return;\n      const {\n        layout,\n        layoutId\n      } = this.options;\n      /**\n       * If we have no layout, we can't perform projection, so early return\n       */\n\n      if (!this.layout || !(layout || layoutId)) return;\n      /**\n       * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n       * a relativeParent. This will allow a component to perform scale correction\n       * even if no animation has started.\n       */\n      // TODO If this is unsuccessful this currently happens every frame\n\n      if (!this.targetDelta && !this.relativeTarget) {\n        // TODO: This is a semi-repetition of further down this function, make DRY\n        const relativeParent = this.getClosestProjectingParent();\n\n        if (relativeParent && relativeParent.layout) {\n          this.relativeParent = relativeParent;\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        } else {\n          this.relativeParent = this.relativeTarget = undefined;\n        }\n      }\n      /**\n       * If we have no relative target or no target delta our target isn't valid\n       * for this frame.\n       */\n\n\n      if (!this.relativeTarget && !this.targetDelta) return;\n      /**\n       * Lazy-init target data structure\n       */\n\n      if (!this.target) {\n        this.target = createBox();\n        this.targetWithTransforms = createBox();\n      }\n      /**\n       * If we've got a relative box for this component, resolve it into a target relative to the parent.\n       */\n\n\n      if (this.relativeTarget && this.relativeTargetOrigin && ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n        calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n        /**\n         * If we've only got a targetDelta, resolve it into a target\n         */\n      } else if (this.targetDelta) {\n        if (Boolean(this.resumingFrom)) {\n          // TODO: This is creating a new object every frame\n          this.target = this.applyTransform(this.layout.layoutBox);\n        } else {\n          copyBoxInto(this.target, this.layout.layoutBox);\n        }\n\n        applyBoxDelta(this.target, this.targetDelta);\n      } else {\n        /**\n         * If no target, use own layout as target\n         */\n        copyBoxInto(this.target, this.layout.layoutBox);\n      }\n      /**\n       * If we've been told to attempt to resolve a relative target, do so.\n       */\n\n\n      if (this.attemptToResolveRelativeTarget) {\n        this.attemptToResolveRelativeTarget = false;\n        const relativeParent = this.getClosestProjectingParent();\n\n        if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target) {\n          this.relativeParent = relativeParent;\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        } else {\n          this.relativeParent = this.relativeTarget = undefined;\n        }\n      }\n    }\n\n    getClosestProjectingParent() {\n      if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) {\n        return undefined;\n      }\n\n      if ((this.parent.relativeTarget || this.parent.targetDelta || this.parent.options.layoutRoot) && this.parent.layout) {\n        return this.parent;\n      } else {\n        return this.parent.getClosestProjectingParent();\n      }\n    }\n\n    calcProjection() {\n      var _a;\n\n      const {\n        isProjectionDirty,\n        isTransformDirty\n      } = this;\n      this.isProjectionDirty = this.isTransformDirty = false;\n      const lead = this.getLead();\n      const isShared = Boolean(this.resumingFrom) || this !== lead;\n      let canSkip = true;\n      if (isProjectionDirty) canSkip = false;\n      if (isShared && isTransformDirty) canSkip = false;\n      if (canSkip) return;\n      const {\n        layout,\n        layoutId\n      } = this.options;\n      /**\n       * If this section of the tree isn't animating we can\n       * delete our target sources for the following frame.\n       */\n\n      this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) || this.currentAnimation || this.pendingAnimation);\n\n      if (!this.isTreeAnimating) {\n        this.targetDelta = this.relativeTarget = undefined;\n      }\n\n      if (!this.layout || !(layout || layoutId)) return;\n      /**\n       * Reset the corrected box with the latest values from box, as we're then going\n       * to perform mutative operations on it.\n       */\n\n      copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n      /**\n       * Apply all the parent deltas to this box to produce the corrected box. This\n       * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n       */\n\n      applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n      const {\n        target\n      } = lead;\n      if (!target) return;\n\n      if (!this.projectionDelta) {\n        this.projectionDelta = createDelta();\n        this.projectionDeltaWithTransform = createDelta();\n      }\n\n      const prevTreeScaleX = this.treeScale.x;\n      const prevTreeScaleY = this.treeScale.y;\n      const prevProjectionTransform = this.projectionTransform;\n      /**\n       * Update the delta between the corrected box and the target box before user-set transforms were applied.\n       * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n       * for our layout reprojection, but still allow them to be scaled correctly by the user.\n       * It might be that to simplify this we may want to accept that user-set scale is also corrected\n       * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n       * to allow people to choose whether these styles are corrected based on just the\n       * layout reprojection or the final bounding box.\n       */\n\n      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n      this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n\n      if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n        this.hasProjected = true;\n        this.scheduleRender();\n        this.notifyListeners(\"projectionUpdate\", target);\n      }\n    }\n\n    hide() {\n      this.isVisible = false; // TODO: Schedule render\n    }\n\n    show() {\n      this.isVisible = true; // TODO: Schedule render\n    }\n\n    scheduleRender() {\n      let notifyAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      var _a, _b, _c;\n\n      (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n      notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n\n      if (this.resumingFrom && !this.resumingFrom.instance) {\n        this.resumingFrom = undefined;\n      }\n    }\n\n    setAnimationOrigin(delta) {\n      let hasOnlyRelativeTargetChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var _a, _b;\n\n      const snapshot = this.snapshot;\n      const snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n      const mixedValues = { ...this.latestValues\n      };\n      const targetDelta = createDelta();\n\n      if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {\n        this.relativeTarget = this.relativeTargetOrigin = undefined;\n      }\n\n      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n      const relativeLayout = createBox();\n      const isSharedLayoutAnimation = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.source) !== ((_a = this.layout) === null || _a === void 0 ? void 0 : _a.source);\n      const isOnlyMember = (((_b = this.getStack()) === null || _b === void 0 ? void 0 : _b.members.length) || 0) <= 1;\n      const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n      this.animationProgress = 0;\n\n      this.mixTargetDelta = latest => {\n        var _a;\n\n        const progress = latest / 1000;\n        mixAxisDelta(targetDelta.x, delta.x, progress);\n        mixAxisDelta(targetDelta.y, delta.y, progress);\n        this.setTargetDelta(targetDelta);\n\n        if (this.relativeTarget && this.relativeTargetOrigin && this.layout && ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n          calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n          mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n        }\n\n        if (isSharedLayoutAnimation) {\n          this.animationValues = mixedValues;\n          mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n        }\n\n        this.root.scheduleUpdateProjection();\n        this.scheduleRender();\n        this.animationProgress = progress;\n      };\n\n      this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n    }\n\n    startAnimation(options) {\n      var _a, _b;\n\n      this.notifyListeners(\"animationStart\");\n      (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n\n      if (this.resumingFrom) {\n        (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n      }\n\n      if (this.pendingAnimation) {\n        cancelSync.update(this.pendingAnimation);\n        this.pendingAnimation = undefined;\n      }\n      /**\n       * Start the animation in the next frame to have a frame with progress 0,\n       * where the target is the same as when the animation started, so we can\n       * calculate the relative positions correctly for instant transitions.\n       */\n\n\n      this.pendingAnimation = sync.update(() => {\n        globalProjectionState.hasAnimatedSinceResize = true;\n        this.currentAnimation = animate(0, animationTarget, { ...options,\n          onUpdate: latest => {\n            var _a;\n\n            this.mixTargetDelta(latest);\n            (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n          },\n          onComplete: () => {\n            var _a;\n\n            (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n            this.completeAnimation();\n          }\n        });\n\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = this.currentAnimation;\n        }\n\n        this.pendingAnimation = undefined;\n      });\n    }\n\n    completeAnimation() {\n      var _a;\n\n      if (this.resumingFrom) {\n        this.resumingFrom.currentAnimation = undefined;\n        this.resumingFrom.preserveOpacity = undefined;\n      }\n\n      (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n      this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n      this.notifyListeners(\"animationComplete\");\n    }\n\n    finishAnimation() {\n      var _a;\n\n      if (this.currentAnimation) {\n        (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n        this.currentAnimation.stop();\n      }\n\n      this.completeAnimation();\n    }\n\n    applyTransformsToTarget() {\n      const lead = this.getLead();\n      let {\n        targetWithTransforms,\n        target,\n        layout,\n        latestValues\n      } = lead;\n      if (!targetWithTransforms || !target || !layout) return;\n      /**\n       * If we're only animating position, and this element isn't the lead element,\n       * then instead of projecting into the lead box we instead want to calculate\n       * a new target that aligns the two boxes but maintains the layout shape.\n       */\n\n      if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n        target = this.target || createBox();\n        const xLength = calcLength(this.layout.layoutBox.x);\n        target.x.min = lead.target.x.min;\n        target.x.max = target.x.min + xLength;\n        const yLength = calcLength(this.layout.layoutBox.y);\n        target.y.min = lead.target.y.min;\n        target.y.max = target.y.min + yLength;\n      }\n\n      copyBoxInto(targetWithTransforms, target);\n      /**\n       * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n       * This is the final box that we will then project into by calculating a transform delta and\n       * applying it to the corrected box.\n       */\n\n      transformBox(targetWithTransforms, latestValues);\n      /**\n       * Update the delta between the corrected box and the final target box, after\n       * user-set transforms are applied to it. This will be used by the renderer to\n       * create a transform style that will reproject the element from its layout layout\n       * into the desired bounding box.\n       */\n\n      calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n    }\n\n    registerSharedNode(layoutId, node) {\n      var _a, _b, _c;\n\n      if (!this.sharedNodes.has(layoutId)) {\n        this.sharedNodes.set(layoutId, new NodeStack());\n      }\n\n      const stack = this.sharedNodes.get(layoutId);\n      stack.add(node);\n      node.promote({\n        transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n        preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node)\n      });\n    }\n\n    isLead() {\n      const stack = this.getStack();\n      return stack ? stack.lead === this : true;\n    }\n\n    getLead() {\n      var _a;\n\n      const {\n        layoutId\n      } = this.options;\n      return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n    }\n\n    getPrevLead() {\n      var _a;\n\n      const {\n        layoutId\n      } = this.options;\n      return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n    }\n\n    getStack() {\n      const {\n        layoutId\n      } = this.options;\n      if (layoutId) return this.root.sharedNodes.get(layoutId);\n    }\n\n    promote() {\n      let {\n        needsReset,\n        transition,\n        preserveFollowOpacity\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const stack = this.getStack();\n      if (stack) stack.promote(this, preserveFollowOpacity);\n\n      if (needsReset) {\n        this.projectionDelta = undefined;\n        this.needsReset = true;\n      }\n\n      if (transition) this.setOptions({\n        transition\n      });\n    }\n\n    relegate() {\n      const stack = this.getStack();\n\n      if (stack) {\n        return stack.relegate(this);\n      } else {\n        return false;\n      }\n    }\n\n    resetRotation() {\n      const {\n        visualElement\n      } = this.options;\n      if (!visualElement) return; // If there's no detected rotation values, we can early return without a forced render.\n\n      let hasRotate = false;\n      /**\n       * An unrolled check for rotation values. Most elements don't have any rotation and\n       * skipping the nested loop and new object creation is 50% faster.\n       */\n\n      const {\n        latestValues\n      } = visualElement;\n\n      if (latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ) {\n        hasRotate = true;\n      } // If there's no rotation values, we don't need to do any more.\n\n\n      if (!hasRotate) return;\n      const resetValues = {}; // Check the rotate value of all axes and reset to 0\n\n      for (let i = 0; i < transformAxes.length; i++) {\n        const key = \"rotate\" + transformAxes[i]; // Record the rotation and then temporarily set it to 0\n\n        if (latestValues[key]) {\n          resetValues[key] = latestValues[key];\n          visualElement.setStaticValue(key, 0);\n        }\n      } // Force a render of this element to apply the transform with all rotations\n      // set to 0.\n\n\n      visualElement === null || visualElement === void 0 ? void 0 : visualElement.render(); // Put back all the values we reset\n\n      for (const key in resetValues) {\n        visualElement.setStaticValue(key, resetValues[key]);\n      } // Schedule a render for the next frame. This ensures we won't visually\n      // see the element with the reset rotate value applied.\n\n\n      visualElement.scheduleRender();\n    }\n\n    getProjectionStyles() {\n      let styleProp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _a, _b; // TODO: Return lifecycle-persistent object\n\n\n      const styles = {};\n      if (!this.instance || this.isSVG) return styles;\n\n      if (!this.isVisible) {\n        return {\n          visibility: \"hidden\"\n        };\n      } else {\n        styles.visibility = \"\";\n      }\n\n      const transformTemplate = this.getTransformTemplate();\n\n      if (this.needsReset) {\n        this.needsReset = false;\n        styles.opacity = \"\";\n        styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n        styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n        return styles;\n      }\n\n      const lead = this.getLead();\n\n      if (!this.projectionDelta || !this.layout || !lead.target) {\n        const emptyStyles = {};\n\n        if (this.options.layoutId) {\n          emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n          emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n        }\n\n        if (this.hasProjected && !hasTransform(this.latestValues)) {\n          emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n          this.hasProjected = false;\n        }\n\n        return emptyStyles;\n      }\n\n      const valuesToRender = lead.animationValues || lead.latestValues;\n      this.applyTransformsToTarget();\n      styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n\n      if (transformTemplate) {\n        styles.transform = transformTemplate(valuesToRender, styles.transform);\n      }\n\n      const {\n        x,\n        y\n      } = this.projectionDelta;\n      styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n\n      if (lead.animationValues) {\n        /**\n         * If the lead component is animating, assign this either the entering/leaving\n         * opacity\n         */\n        styles.opacity = lead === this ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n      } else {\n        /**\n         * Or we're not animating at all, set the lead component to its layout\n         * opacity and other components to hidden.\n         */\n        styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n      }\n      /**\n       * Apply scale correction\n       */\n\n\n      for (const key in scaleCorrectors) {\n        if (valuesToRender[key] === undefined) continue;\n        const {\n          correct,\n          applyTo\n        } = scaleCorrectors[key];\n        /**\n         * Only apply scale correction to the value if we have an\n         * active projection transform. Otherwise these values become\n         * vulnerable to distortion if the element changes size without\n         * a corresponding layout animation.\n         */\n\n        const corrected = styles.transform === \"none\" ? valuesToRender[key] : correct(valuesToRender[key], lead);\n\n        if (applyTo) {\n          const num = applyTo.length;\n\n          for (let i = 0; i < num; i++) {\n            styles[applyTo[i]] = corrected;\n          }\n        } else {\n          styles[key] = corrected;\n        }\n      }\n      /**\n       * Disable pointer events on follow components. This is to ensure\n       * that if a follow component covers a lead component it doesn't block\n       * pointer events on the lead.\n       */\n\n\n      if (this.options.layoutId) {\n        styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || \"\" : \"none\";\n      }\n\n      return styles;\n    }\n\n    clearSnapshot() {\n      this.resumeFrom = this.snapshot = undefined;\n    } // Only run on root\n\n\n    resetTree() {\n      this.root.nodes.forEach(node => {\n        var _a;\n\n        return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n      });\n      this.root.nodes.forEach(clearMeasurements);\n      this.root.sharedNodes.clear();\n    }\n\n  };\n}\n\nfunction updateLayout(node) {\n  node.updateLayout();\n}\n\nfunction notifyLayoutUpdate(node) {\n  var _a, _b, _c;\n\n  const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    const {\n      layoutBox: layout,\n      measuredBox: measuredLayout\n    } = node.layout;\n    const {\n      animationType\n    } = node.options;\n    const isShared = snapshot.source !== node.layout.source; // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n\n    if (animationType === \"size\") {\n      eachAxis(axis => {\n        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        const length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n      eachAxis(axis => {\n        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        const length = calcLength(layout[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    }\n\n    const layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n    const visualDelta = createDelta();\n\n    if (isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n    } else {\n      calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n    }\n\n    const hasLayoutChanged = !isDeltaZero(layoutDelta);\n    let hasRelativeTargetChanged = false;\n\n    if (!node.resumeFrom) {\n      const relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n\n      if (relativeParent && !relativeParent.resumeFrom) {\n        const {\n          snapshot: parentSnapshot,\n          layout: parentLayout\n        } = relativeParent;\n\n        if (parentSnapshot && parentLayout) {\n          const relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n          const relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n\n          if (!boxEquals(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n\n          if (relativeParent.options.layoutRoot) {\n            node.relativeTarget = relativeLayout;\n            node.relativeTargetOrigin = relativeSnapshot;\n            node.relativeParent = relativeParent;\n          }\n        }\n      }\n    }\n\n    node.notifyListeners(\"didUpdate\", {\n      layout,\n      snapshot,\n      delta: visualDelta,\n      layoutDelta,\n      hasLayoutChanged,\n      hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    (_c = (_b = node.options).onExitComplete) === null || _c === void 0 ? void 0 : _c.call(_b);\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n\n\n  node.options.transition = undefined;\n}\n\nfunction propagateDirtyNodes(node) {\n  /**\n   * Propagate isProjectionDirty. Nodes are ordered by depth, so if the parent here\n   * is dirty we can simply pass this forward.\n   */\n  node.isProjectionDirty || (node.isProjectionDirty = Boolean(node.parent && node.parent.isProjectionDirty));\n  /**\n   * Propagate isTransformDirty.\n   */\n\n  node.isTransformDirty || (node.isTransformDirty = Boolean(node.parent && node.parent.isTransformDirty));\n}\n\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\n\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\n\nfunction resetTransformStyle(node) {\n  const {\n    visualElement\n  } = node.options;\n\n  if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notify(\"BeforeLayoutMeasure\");\n  }\n\n  node.resetTransform();\n}\n\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n}\n\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\n\nfunction calcProjection(node) {\n  node.calcProjection();\n}\n\nfunction resetRotation(node) {\n  node.resetRotation();\n}\n\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\n\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mix(delta.translate, 0, p);\n  output.scale = mix(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\n\nfunction mixAxis(output, from, to, p) {\n  output.min = mix(from.min, to.min, p);\n  output.max = mix(from.max, to.max, p);\n}\n\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\n\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\n\nconst defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\n\nfunction mountNodeEarly(node, elementId) {\n  /**\n   * Rather than searching the DOM from document we can search the\n   * path for the deepest mounted ancestor and search from there\n   */\n  let searchNode = node.root;\n\n  for (let i = node.path.length - 1; i >= 0; i--) {\n    if (Boolean(node.path[i].instance)) {\n      searchNode = node.path[i];\n      break;\n    }\n  }\n\n  const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n  const element = searchElement.querySelector(`[data-projection-id=\"${elementId}\"]`);\n  if (element) node.mount(element, true);\n}\n\nfunction roundAxis(axis) {\n  axis.min = Math.round(axis.min);\n  axis.max = Math.round(axis.max);\n}\n\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\n\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n  return animationType === \"position\" || animationType === \"preserve-aspect\" && !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2);\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };","map":{"version":3,"names":["cancelSync","flushSync","sync","animate","SubscriptionManager","mixValues","copyBoxInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","isNear","removeBoxTransforms","createBox","createDelta","getValueTransition","boxEquals","isDeltaZero","aspectRatio","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","has2DTranslate","FlatTree","resolveMotionValue","globalProjectionState","delay","mix","transformAxes","animationTarget","id","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","ProjectionNode","constructor","elementId","latestValues","parent","animationId","children","Set","options","isTreeAnimating","isAnimationBlocked","isLayoutDirty","isTransformDirty","isProjectionDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","propagateDirtyNodes","resolveTargetDelta","calcProjection","hasProjected","isVisible","animationProgress","sharedNodes","root","path","depth","registerPotentialNode","i","length","addEventListener","name","handler","has","set","get","add","notifyListeners","subscriptionManager","args","notify","hasListeners","node","mount","instance","_a","SVGElement","tagName","layoutId","layout","visualElement","current","delete","cancelDelay","resizeUnblockUpdate","hasAnimatedSinceResize","finishAnimation","registerSharedNode","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","_b","_c","_d","_e","isTreeAnimationBlocked","target","undefined","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","getProps","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","onPlay","onComplete","shouldReduceMotion","type","startAnimation","isLead","onExitComplete","call","unmount","willUpdate","remove","getStack","preRender","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","getTransformTemplate","transformTemplate","shouldNotifyListeners","updateScroll","prevTransformTemplateValue","updateSnapshot","didUpdate","updateWasBlocked","clearMeasurements","size","mountNodeEarly","clear","resetTransformStyle","updateLayout","notifyLayoutUpdate","update","render","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","scheduleCheckAfterUnmount","postRender","snapshot","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","projectionDelta","layoutBox","phase","needsMeasurement","Boolean","layoutScroll","scroll","isRoot","offset","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","removeTransform","pageBox","measurePageBox","removeElementScroll","roundBox","measuredBox","source","box","measureViewportBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","setTargetDelta","targetDelta","setOptions","crossfade","lead","getLead","attemptToResolveRelativeTarget","relativeParent","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isShared","canSkip","pendingAnimation","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","hide","show","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isOnlyMember","members","shouldCrossfadeOpacity","some","hasOpacityCrossfade","mixTargetDelta","latest","progress","mixAxisDelta","mixBox","animationValues","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","min","max","yLength","stack","promote","initialPromotionConfig","preserveFollowOpacity","shouldPreserveFollowOpacity","getPrevLead","prevLead","relegate","hasRotate","rotate","rotateX","rotateY","rotateZ","resetValues","key","setStaticValue","getProjectionStyles","styleProp","styles","visibility","opacity","pointerEvents","transform","emptyStyles","valuesToRender","transformOrigin","origin","opacityExit","correct","applyTo","corrected","num","resetTree","measuredLayout","axis","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","searchNode","searchElement","document","element","querySelector","roundAxis","Math","round"],"sources":["C:/Users/DEV/Downloads/Pizza Time/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import { cancelSync, flushSync, sync } from '../../frameloop/index.mjs';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(elementId, latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            this.isTransformDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this or any\n             * child might need recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.elementId = elementId;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            elementId && this.root.registerPotentialNode(elementId, this);\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        registerPotentialNode(elementId, node) {\n            this.potentialNodes.set(elementId, node);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = false) {\n            var _a;\n            if (this.instance)\n                return;\n            this.isSVG =\n                instance instanceof SVGElement && instance.tagName !== \"svg\";\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n            this.elementId && this.root.potentialNodes.delete(this.elementId);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    var _a, _b, _c, _d, _e;\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = (_b = (_a = this.options.transition) !== null && _a !== void 0 ? _a : visualElement.getDefaultTransition()) !== null && _b !== void 0 ? _b : defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEquals(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        ((_c = this.resumeFrom) === null || _c === void 0 ? void 0 : _c.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged &&\n                            this.animationProgress === 0) {\n                            finishAnimation(this);\n                        }\n                        this.isLead() && ((_e = (_d = this.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d));\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            var _a, _b;\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n            this.instance = undefined;\n            cancelSync.preRender(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            var _a;\n            return (this.isAnimationBlocked ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            var _a;\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            var _a;\n            return (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            var _a, _b, _c;\n            if (this.root.isUpdateBlocked()) {\n                (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            this.prevTransformTemplateValue = (_c = this.getTransformTemplate()) === null || _c === void 0 ? void 0 : _c(this.latestValues, \"\");\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        // Note: Currently only running on root node\n        didUpdate() {\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            flushSync.update();\n            flushSync.preRender();\n            flushSync.render();\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            sync.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            sync.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            var _a;\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.layoutBox);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            var _a;\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplateValue = (_a = this.getTransformTemplate()) === null || _a === void 0 ? void 0 : _a(this.latestValues, \"\");\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            var _a;\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layoutBox, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        /**\n         *\n         */\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.isProjectionDirty = true;\n            this.root.scheduleUpdateProjection();\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        /**\n         * Frame calculations\n         */\n        resolveTargetDelta() {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            if (!this.isProjectionDirty && !this.attemptToResolveRelativeTarget)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && relativeParent.layout) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if ((this.parent.relativeTarget ||\n                this.parent.targetDelta ||\n                this.parent.options.layoutRoot) &&\n                this.parent.layout) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        calcProjection() {\n            var _a;\n            const { isProjectionDirty, isTransformDirty } = this;\n            this.isProjectionDirty = this.isTransformDirty = false;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            if (isProjectionDirty)\n                canSkip = false;\n            if (isShared && isTransformDirty)\n                canSkip = false;\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            const { target } = lead;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            var _a, _b, _c;\n            (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n            notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            var _a, _b;\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const isSharedLayoutAnimation = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.source) !== ((_a = this.layout) === null || _a === void 0 ? void 0 : _a.source);\n            const isOnlyMember = (((_b = this.getStack()) === null || _b === void 0 ? void 0 : _b.members.length) || 0) <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            this.mixTargetDelta = (latest) => {\n                var _a;\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            var _a, _b;\n            this.notifyListeners(\"animationStart\");\n            (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            if (this.resumingFrom) {\n                (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = sync.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animate(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        var _a;\n                        this.mixTargetDelta(latest);\n                        (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n                    },\n                    onComplete: () => {\n                        var _a;\n                        (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            var _a;\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            var _a;\n            if (this.currentAnimation) {\n                (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            var _a, _b, _c;\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            node.promote({\n                transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n                preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node),\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement === null || visualElement === void 0 ? void 0 : visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a, _b, _c;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        (_c = (_b = node.options).onExitComplete) === null || _c === void 0 ? void 0 : _c.call(_b);\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Propagate isProjectionDirty. Nodes are ordered by depth, so if the parent here\n     * is dirty we can simply pass this forward.\n     */\n    node.isProjectionDirty || (node.isProjectionDirty = Boolean(node.parent && node.parent.isProjectionDirty));\n    /**\n     * Propagate isTransformDirty.\n     */\n    node.isTransformDirty || (node.isTransformDirty = Boolean(node.parent && node.parent.isTransformDirty));\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, elementId) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    let searchNode = node.root;\n    for (let i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    const element = searchElement.querySelector(`[data-projection-id=\"${elementId}\"]`);\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}