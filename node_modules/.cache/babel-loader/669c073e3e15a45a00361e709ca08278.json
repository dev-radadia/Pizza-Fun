{"ast":null,"code":"import { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { parseDomVariant } from './utils/parse-dom-variant.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n  sortInstanceNodePosition(a, b) {\n    /**\n     * compareDocumentPosition returns a bitmask, by using the bitwise &\n     * we're returning true if 2 in that bitmask is set to true. 2 is set\n     * to true if b preceeds a.\n     */\n    return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n  }\n\n  getBaseTargetFromProps(props, key) {\n    var _a;\n\n    return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n  }\n\n  removeValueFromRenderState(key, _ref) {\n    let {\n      vars,\n      style\n    } = _ref;\n    delete vars[key];\n    delete style[key];\n  }\n\n  makeTargetAnimatableFromInstance(_ref2, _ref3, isMounted) {\n    let {\n      transition,\n      transitionEnd,\n      ...target\n    } = _ref2;\n    let {\n      transformValues\n    } = _ref3;\n    let origin = getOrigin(target, transition || {}, this);\n    /**\n     * If Framer has provided a function to convert `Color` etc value types, convert them\n     */\n\n    if (transformValues) {\n      if (transitionEnd) transitionEnd = transformValues(transitionEnd);\n      if (target) target = transformValues(target);\n      if (origin) origin = transformValues(origin);\n    }\n\n    if (isMounted) {\n      checkTargetForNewValues(this, target, origin);\n      const parsed = parseDomVariant(this, target, origin, transitionEnd);\n      transitionEnd = parsed.transitionEnd;\n      target = parsed.target;\n    }\n\n    return {\n      transition,\n      transitionEnd,\n      ...target\n    };\n  }\n\n}\n\nexport { DOMVisualElement };","map":{"version":3,"names":["getOrigin","checkTargetForNewValues","parseDomVariant","VisualElement","DOMVisualElement","sortInstanceNodePosition","a","b","compareDocumentPosition","getBaseTargetFromProps","props","key","_a","style","removeValueFromRenderState","vars","makeTargetAnimatableFromInstance","isMounted","transition","transitionEnd","target","transformValues","origin","parsed"],"sources":["C:/Users/DEV/Downloads/Pizza Time/node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs"],"sourcesContent":["import { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { parseDomVariant } from './utils/parse-dom-variant.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        var _a;\n        return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, { transformValues }, isMounted) {\n        let origin = getOrigin(target, transition || {}, this);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(this, target, origin);\n            const parsed = parseDomVariant(this, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return {\n            transition,\n            transitionEnd,\n            ...target,\n        };\n    }\n}\n\nexport { DOMVisualElement };\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,uBAApB,QAAmD,sBAAnD;AACA,SAASC,eAAT,QAAgC,+BAAhC;AACA,SAASC,aAAT,QAA8B,sBAA9B;;AAEA,MAAMC,gBAAN,SAA+BD,aAA/B,CAA6C;EACzCE,wBAAwB,CAACC,CAAD,EAAIC,CAAJ,EAAO;IAC3B;AACR;AACA;AACA;AACA;IACQ,OAAOD,CAAC,CAACE,uBAAF,CAA0BD,CAA1B,IAA+B,CAA/B,GAAmC,CAAnC,GAAuC,CAAC,CAA/C;EACH;;EACDE,sBAAsB,CAACC,KAAD,EAAQC,GAAR,EAAa;IAC/B,IAAIC,EAAJ;;IACA,OAAO,CAACA,EAAE,GAAGF,KAAK,CAACG,KAAZ,MAAuB,IAAvB,IAA+BD,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACD,GAAD,CAAjE;EACH;;EACDG,0BAA0B,CAACH,GAAD,QAAuB;IAAA,IAAjB;MAAEI,IAAF;MAAQF;IAAR,CAAiB;IAC7C,OAAOE,IAAI,CAACJ,GAAD,CAAX;IACA,OAAOE,KAAK,CAACF,GAAD,CAAZ;EACH;;EACDK,gCAAgC,eAAgEC,SAAhE,EAA2E;IAAA,IAA1E;MAAEC,UAAF;MAAcC,aAAd;MAA6B,GAAGC;IAAhC,CAA0E;IAAA,IAAhC;MAAEC;IAAF,CAAgC;IACvG,IAAIC,MAAM,GAAGtB,SAAS,CAACoB,MAAD,EAASF,UAAU,IAAI,EAAvB,EAA2B,IAA3B,CAAtB;IACA;AACR;AACA;;IACQ,IAAIG,eAAJ,EAAqB;MACjB,IAAIF,aAAJ,EACIA,aAAa,GAAGE,eAAe,CAACF,aAAD,CAA/B;MACJ,IAAIC,MAAJ,EACIA,MAAM,GAAGC,eAAe,CAACD,MAAD,CAAxB;MACJ,IAAIE,MAAJ,EACIA,MAAM,GAAGD,eAAe,CAACC,MAAD,CAAxB;IACP;;IACD,IAAIL,SAAJ,EAAe;MACXhB,uBAAuB,CAAC,IAAD,EAAOmB,MAAP,EAAeE,MAAf,CAAvB;MACA,MAAMC,MAAM,GAAGrB,eAAe,CAAC,IAAD,EAAOkB,MAAP,EAAeE,MAAf,EAAuBH,aAAvB,CAA9B;MACAA,aAAa,GAAGI,MAAM,CAACJ,aAAvB;MACAC,MAAM,GAAGG,MAAM,CAACH,MAAhB;IACH;;IACD,OAAO;MACHF,UADG;MAEHC,aAFG;MAGH,GAAGC;IAHA,CAAP;EAKH;;AAzCwC;;AA4C7C,SAAShB,gBAAT"},"metadata":{},"sourceType":"module"}