{"ast":null,"code":"import { sync, cancelSync } from '../frameloop/index.mjs';\nimport { warning, invariant } from 'hey-listen';\nimport { createElement } from 'react';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\"AnimationStart\", \"AnimationComplete\", \"Update\", \"BeforeLayoutMeasure\", \"LayoutMeasure\", \"LayoutAnimationStart\", \"LayoutAnimationComplete\"];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\n\nclass VisualElement {\n  constructor(_ref) {\n    let {\n      parent,\n      props,\n      reducedMotionConfig,\n      visualState\n    } = _ref;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    /**\n     * A reference to the current underlying Instance, e.g. a HTMLElement\n     * or Three.Mesh etc.\n     */\n    this.current = null;\n    /**\n     * A set containing references to this VisualElement's children.\n     */\n\n    this.children = new Set();\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n\n    this.isVariantNode = false;\n    this.isControllingVariants = false;\n    /**\n     * Decides whether this VisualElement should animate in reduced motion\n     * mode.\n     *\n     * TODO: This is currently set on every individual VisualElement but feels\n     * like it could be set globally.\n     */\n\n    this.shouldReduceMotion = null;\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n\n    this.values = new Map();\n    /**\n     * Tracks whether this VisualElement's React component is currently present\n     * within the defined React tree.\n     */\n\n    this.isPresent = true;\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n\n    this.valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n\n    this.prevMotionValues = {};\n    /**\n     * An object containing a SubscriptionManager for each active event.\n     */\n\n    this.events = {};\n    /**\n     * An object containing an unsubscribe function for each prop event subscription.\n     * For example, every \"Update\" event can have multiple subscribers via\n     * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n     */\n\n    this.propEventSubscriptions = {};\n\n    this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n\n    this.render = () => {\n      if (!this.current) return;\n      this.triggerBuild();\n      this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n    };\n\n    this.scheduleRender = () => sync.render(this.render, false, true);\n\n    const {\n      latestValues,\n      renderState\n    } = visualState;\n    this.latestValues = latestValues;\n    this.baseTarget = { ...latestValues\n    };\n    this.initialValues = props.initial ? { ...latestValues\n    } : {};\n    this.renderState = renderState;\n    this.parent = parent;\n    this.props = props;\n    this.depth = parent ? parent.depth + 1 : 0;\n    this.reducedMotionConfig = reducedMotionConfig;\n    this.options = options;\n    this.isControllingVariants = isControllingVariants(props);\n    this.isVariantNode = isVariantNode(props);\n\n    if (this.isVariantNode) {\n      this.variantChildren = new Set();\n    }\n\n    this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n\n    const {\n      willChange,\n      ...initialMotionValues\n    } = this.scrapeMotionValuesFromProps(props, {});\n\n    for (const key in initialMotionValues) {\n      const value = initialMotionValues[key];\n\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n\n        if (isWillChangeMotionValue(willChange)) {\n          willChange.add(key);\n        }\n      }\n    }\n  }\n  /**\n   * This method takes React props and returns found MotionValues. For example, HTML\n   * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n   *\n   * This isn't an abstract method as it needs calling in the constructor, but it is\n   * intended to be one.\n   */\n\n\n  scrapeMotionValuesFromProps(_props, _prevProps) {\n    return {};\n  }\n\n  mount(instance) {\n    var _a;\n\n    this.current = instance;\n\n    if (this.projection) {\n      this.projection.mount(instance);\n    }\n\n    if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n      this.removeFromVariantTree = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.addVariantChild(this);\n    }\n\n    this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n\n    if (!hasReducedMotionListener.current) {\n      initPrefersReducedMotion();\n    }\n\n    this.shouldReduceMotion = this.reducedMotionConfig === \"never\" ? false : this.reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n    }\n\n    if (this.parent) this.parent.children.add(this);\n    this.setProps(this.props);\n  }\n\n  unmount() {\n    var _a, _b, _c;\n\n    (_a = this.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n    cancelSync.update(this.notifyUpdate);\n    cancelSync.render(this.render);\n    this.valueSubscriptions.forEach(remove => remove());\n    (_b = this.removeFromVariantTree) === null || _b === void 0 ? void 0 : _b.call(this);\n    (_c = this.parent) === null || _c === void 0 ? void 0 : _c.children.delete(this);\n\n    for (const key in this.events) {\n      this.events[key].clear();\n    }\n\n    this.current = null;\n  }\n\n  bindToMotionValue(key, value) {\n    const valueIsTransform = transformProps.has(key);\n    const removeOnChange = value.on(\"change\", latestValue => {\n      this.latestValues[key] = latestValue;\n      this.props.onUpdate && sync.update(this.notifyUpdate, false, true);\n\n      if (valueIsTransform && this.projection) {\n        this.projection.isTransformDirty = true;\n      }\n    });\n    const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n    this.valueSubscriptions.set(key, () => {\n      removeOnChange();\n      removeOnRenderRequest();\n    });\n  }\n\n  sortNodePosition(other) {\n    /**\n     * If these nodes aren't even of the same type we can't compare their depth.\n     */\n    if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) return 0;\n    return this.sortInstanceNodePosition(this.current, other.current);\n  }\n\n  loadFeatures(_ref2, isStrict, preloadedFeatures, projectionId, ProjectionNodeConstructor, initialLayoutGroupConfig) {\n    let {\n      children,\n      ...renderedProps\n    } = _ref2;\n    const features = [];\n    /**\n     * If we're in development mode, check to make sure we're not rendering a motion component\n     * as a child of LazyMotion, as this will break the file-size benefits of using it.\n     */\n\n    if (process.env.NODE_ENV !== \"production\" && preloadedFeatures && isStrict) {\n      const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n      renderedProps.ignoreStrict ? warning(false, strictMessage) : invariant(false, strictMessage);\n    }\n\n    for (let i = 0; i < numFeatures; i++) {\n      const name = featureNames[i];\n      const {\n        isEnabled,\n        Component\n      } = featureDefinitions[name];\n      /**\n       * It might be possible in the future to use this moment to\n       * dynamically request functionality. In initial tests this\n       * was producing a lot of duplication amongst bundles.\n       */\n\n      if (isEnabled(renderedProps) && Component) {\n        features.push(createElement(Component, {\n          key: name,\n          ...renderedProps,\n          visualElement: this\n        }));\n      }\n    }\n\n    if (!this.projection && ProjectionNodeConstructor) {\n      this.projection = new ProjectionNodeConstructor(projectionId, this.latestValues, this.parent && this.parent.projection);\n      const {\n        layoutId,\n        layout,\n        drag,\n        dragConstraints,\n        layoutScroll,\n        layoutRoot\n      } = renderedProps;\n      this.projection.setOptions({\n        layoutId,\n        layout,\n        alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),\n        visualElement: this,\n        scheduleRender: () => this.scheduleRender(),\n\n        /**\n         * TODO: Update options in an effect. This could be tricky as it'll be too late\n         * to update by the time layout animations run.\n         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n         * ensuring it gets called if there's no potential layout animations.\n         *\n         */\n        animationType: typeof layout === \"string\" ? layout : \"both\",\n        initialPromotionConfig: initialLayoutGroupConfig,\n        layoutScroll,\n        layoutRoot\n      });\n    }\n\n    return features;\n  }\n\n  triggerBuild() {\n    this.build(this.renderState, this.latestValues, this.options, this.props);\n  }\n  /**\n   * Measure the current viewport box with or without transforms.\n   * Only measures axis-aligned boxes, rotate and skew must be manually\n   * removed with a re-render to work.\n   */\n\n\n  measureViewportBox() {\n    return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();\n  }\n\n  getStaticValue(key) {\n    return this.latestValues[key];\n  }\n\n  setStaticValue(key, value) {\n    this.latestValues[key] = value;\n  }\n  /**\n   * Make a target animatable by Popmotion. For instance, if we're\n   * trying to animate width from 100px to 100vw we need to measure 100vw\n   * in pixels to determine what we really need to animate to. This is also\n   * pluggable to support Framer's custom value types like Color,\n   * and CSS variables.\n   */\n\n\n  makeTargetAnimatable(target) {\n    let canMutate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n  }\n  /**\n   * Update the provided props. Ensure any newly-added motion values are\n   * added to our map, old ones removed, and listeners updated.\n   */\n\n\n  setProps(props) {\n    if (props.transformTemplate || this.props.transformTemplate) {\n      this.scheduleRender();\n    }\n\n    const prevProps = this.props;\n    this.props = props;\n    /**\n     * Update prop event handlers ie onAnimationStart, onAnimationComplete\n     */\n\n    for (let i = 0; i < propEventHandlers.length; i++) {\n      const key = propEventHandlers[i];\n\n      if (this.propEventSubscriptions[key]) {\n        this.propEventSubscriptions[key]();\n        delete this.propEventSubscriptions[key];\n      }\n\n      const listener = props[\"on\" + key];\n\n      if (listener) {\n        this.propEventSubscriptions[key] = this.on(key, listener);\n      }\n    }\n\n    this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, prevProps), this.prevMotionValues);\n\n    if (this.handleChildMotionValue) {\n      this.handleChildMotionValue();\n    }\n  }\n\n  getProps() {\n    return this.props;\n  }\n  /**\n   * Returns the variant definition with a given name.\n   */\n\n\n  getVariant(name) {\n    var _a;\n\n    return (_a = this.props.variants) === null || _a === void 0 ? void 0 : _a[name];\n  }\n  /**\n   * Returns the defined default transition on this component.\n   */\n\n\n  getDefaultTransition() {\n    return this.props.transition;\n  }\n\n  getTransformPagePoint() {\n    return this.props.transformPagePoint;\n  }\n\n  getClosestVariantNode() {\n    var _a;\n\n    return this.isVariantNode ? this : (_a = this.parent) === null || _a === void 0 ? void 0 : _a.getClosestVariantNode();\n  }\n\n  getVariantContext() {\n    let startAtParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    var _a, _b;\n\n    if (startAtParent) return (_a = this.parent) === null || _a === void 0 ? void 0 : _a.getVariantContext();\n\n    if (!this.isControllingVariants) {\n      const context = ((_b = this.parent) === null || _b === void 0 ? void 0 : _b.getVariantContext()) || {};\n\n      if (this.props.initial !== undefined) {\n        context.initial = this.props.initial;\n      }\n\n      return context;\n    }\n\n    const context = {};\n\n    for (let i = 0; i < numVariantProps; i++) {\n      const name = variantProps[i];\n      const prop = this.props[name];\n\n      if (isVariantLabel(prop) || prop === false) {\n        context[name] = prop;\n      }\n    }\n\n    return context;\n  }\n  /**\n   * Add a child visual element to our set of children.\n   */\n\n\n  addVariantChild(child) {\n    var _a;\n\n    const closestVariantNode = this.getClosestVariantNode();\n\n    if (closestVariantNode) {\n      (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n      return () => closestVariantNode.variantChildren.delete(child);\n    }\n  }\n  /**\n   * Add a motion value and bind it to this visual element.\n   */\n\n\n  addValue(key, value) {\n    // Remove existing value if it exists\n    if (value !== this.values.get(key)) {\n      this.removeValue(key);\n      this.bindToMotionValue(key, value);\n    }\n\n    this.values.set(key, value);\n    this.latestValues[key] = value.get();\n  }\n  /**\n   * Remove a motion value and unbind any active subscriptions.\n   */\n\n\n  removeValue(key) {\n    var _a;\n\n    this.values.delete(key);\n    (_a = this.valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n    this.valueSubscriptions.delete(key);\n    delete this.latestValues[key];\n    this.removeValueFromRenderState(key, this.renderState);\n  }\n  /**\n   * Check whether we have a motion value for this key\n   */\n\n\n  hasValue(key) {\n    return this.values.has(key);\n  }\n\n  getValue(key, defaultValue) {\n    if (this.props.values && this.props.values[key]) {\n      return this.props.values[key];\n    }\n\n    let value = this.values.get(key);\n\n    if (value === undefined && defaultValue !== undefined) {\n      value = motionValue(defaultValue, {\n        owner: this\n      });\n      this.addValue(key, value);\n    }\n\n    return value;\n  }\n  /**\n   * If we're trying to animate to a previously unencountered value,\n   * we need to check for it in our state and as a last resort read it\n   * directly from the instance (which might have performance implications).\n   */\n\n\n  readValue(key) {\n    return this.latestValues[key] !== undefined || !this.current ? this.latestValues[key] : this.readValueFromInstance(this.current, key, this.options);\n  }\n  /**\n   * Set the base target to later animate back to. This is currently\n   * only hydrated on creation and when we first read a value.\n   */\n\n\n  setBaseTarget(key, value) {\n    this.baseTarget[key] = value;\n  }\n  /**\n   * Find the base target for a value thats been removed from all animation\n   * props.\n   */\n\n\n  getBaseTarget(key) {\n    var _a;\n\n    const {\n      initial\n    } = this.props;\n    const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\" ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key] : undefined;\n    /**\n     * If this value still exists in the current initial variant, read that.\n     */\n\n    if (initial && valueFromInitial !== undefined) {\n      return valueFromInitial;\n    }\n    /**\n     * Alternatively, if this VisualElement config has defined a getBaseTarget\n     * so we can read the value from an alternative source, try that.\n     */\n\n\n    const target = this.getBaseTargetFromProps(this.props, key);\n    if (target !== undefined && !isMotionValue(target)) return target;\n    /**\n     * If the value was initially defined on initial, but it doesn't any more,\n     * return undefined. Otherwise return the value as initially read from the DOM.\n     */\n\n    return this.initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : this.baseTarget[key];\n  }\n\n  on(eventName, callback) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = new SubscriptionManager();\n    }\n\n    return this.events[eventName].add(callback);\n  }\n\n  notify(eventName) {\n    var _a;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    (_a = this.events[eventName]) === null || _a === void 0 ? void 0 : _a.notify(...args);\n  }\n\n}\n\nconst variantProps = [\"initial\", ...variantPriorityOrder];\nconst numVariantProps = variantProps.length;\nexport { VisualElement };","map":{"version":3,"names":["sync","cancelSync","warning","invariant","createElement","featureDefinitions","createBox","isRefObject","initPrefersReducedMotion","hasReducedMotionListener","prefersReducedMotion","SubscriptionManager","motionValue","isWillChangeMotionValue","isMotionValue","transformProps","variantPriorityOrder","isControllingVariants","isVariantNode","isVariantLabel","updateMotionValuesFromProps","resolveVariantFromProps","warnOnce","featureNames","Object","keys","numFeatures","length","propEventHandlers","VisualElement","constructor","parent","props","reducedMotionConfig","visualState","options","current","children","Set","shouldReduceMotion","values","Map","isPresent","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","notify","latestValues","render","triggerBuild","renderInstance","renderState","style","projection","scheduleRender","baseTarget","initialValues","initial","depth","variantChildren","manuallyAnimateOnMount","Boolean","willChange","initialMotionValues","scrapeMotionValuesFromProps","key","value","undefined","set","add","_props","_prevProps","mount","instance","_a","removeFromVariantTree","addVariantChild","forEach","bindToMotionValue","process","env","NODE_ENV","setProps","unmount","_b","_c","update","remove","call","delete","clear","valueIsTransform","has","removeOnChange","on","latestValue","onUpdate","isTransformDirty","removeOnRenderRequest","sortNodePosition","other","sortInstanceNodePosition","type","loadFeatures","isStrict","preloadedFeatures","projectionId","ProjectionNodeConstructor","initialLayoutGroupConfig","renderedProps","features","strictMessage","ignoreStrict","i","name","isEnabled","Component","push","visualElement","layoutId","layout","drag","dragConstraints","layoutScroll","layoutRoot","setOptions","alwaysMeasureLayout","animationType","initialPromotionConfig","build","measureViewportBox","measureInstanceViewportBox","getStaticValue","setStaticValue","makeTargetAnimatable","target","canMutate","makeTargetAnimatableFromInstance","transformTemplate","prevProps","listener","handleChildMotionValue","getProps","getVariant","variants","getDefaultTransition","transition","getTransformPagePoint","transformPagePoint","getClosestVariantNode","getVariantContext","startAtParent","context","numVariantProps","variantProps","prop","child","closestVariantNode","addValue","get","removeValue","removeValueFromRenderState","hasValue","getValue","defaultValue","owner","readValue","readValueFromInstance","setBaseTarget","getBaseTarget","valueFromInitial","getBaseTargetFromProps","eventName","callback","args"],"sources":["C:/Users/DEV/Desktop/Projects/Pizza_Fun/node_modules/framer-motion/dist/es/render/VisualElement.mjs"],"sourcesContent":["import { sync, cancelSync } from '../frameloop/index.mjs';\nimport { warning, invariant } from 'hey-listen';\nimport { createElement } from 'react';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    constructor({ parent, props, reducedMotionConfig, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        /**\n         * Tracks whether this VisualElement's React component is currently present\n         * within the defined React tree.\n         */\n        this.isPresent = true;\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => sync.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps) {\n        return {};\n    }\n    mount(instance) {\n        var _a;\n        this.current = instance;\n        if (this.projection) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.setProps(this.props);\n    }\n    unmount() {\n        var _a, _b, _c;\n        (_a = this.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n        cancelSync.update(this.notifyUpdate);\n        cancelSync.render(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        (_b = this.removeFromVariantTree) === null || _b === void 0 ? void 0 : _b.call(this);\n        (_c = this.parent) === null || _c === void 0 ? void 0 : _c.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate &&\n                sync.update(this.notifyUpdate, false, true);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type)\n            return 0;\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, projectionId, ProjectionNodeConstructor, initialLayoutGroupConfig) {\n        const features = [];\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (process.env.NODE_ENV !== \"production\" &&\n            preloadedFeatures &&\n            isStrict) {\n            const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n            renderedProps.ignoreStrict\n                ? warning(false, strictMessage)\n                : invariant(false, strictMessage);\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Component } = featureDefinitions[name];\n            /**\n             * It might be possible in the future to use this moment to\n             * dynamically request functionality. In initial tests this\n             * was producing a lot of duplication amongst bundles.\n             */\n            if (isEnabled(renderedProps) && Component) {\n                features.push(createElement(Component, {\n                    key: name,\n                    ...renderedProps,\n                    visualElement: this,\n                }));\n            }\n        }\n        if (!this.projection && ProjectionNodeConstructor) {\n            this.projection = new ProjectionNodeConstructor(projectionId, this.latestValues, this.parent && this.parent.projection);\n            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = renderedProps;\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n                layoutRoot,\n            });\n        }\n        return features;\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */\n    makeTargetAnimatable(target, canMutate = true) {\n        return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    setProps(props) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        const prevProps = this.props;\n        this.props = props;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listener = props[\"on\" + key];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, prevProps), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        var _a;\n        return (_a = this.props.variants) === null || _a === void 0 ? void 0 : _a[name];\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        var _a;\n        return this.isVariantNode ? this : (_a = this.parent) === null || _a === void 0 ? void 0 : _a.getClosestVariantNode();\n    }\n    getVariantContext(startAtParent = false) {\n        var _a, _b;\n        if (startAtParent)\n            return (_a = this.parent) === null || _a === void 0 ? void 0 : _a.getVariantContext();\n        if (!this.isControllingVariants) {\n            const context = ((_b = this.parent) === null || _b === void 0 ? void 0 : _b.getVariantContext()) || {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        var _a;\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        if (value !== this.values.get(key)) {\n            this.removeValue(key);\n            this.bindToMotionValue(key, value);\n        }\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        var _a;\n        this.values.delete(key);\n        (_a = this.valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n        this.valueSubscriptions.delete(key);\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key) {\n        return this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n            ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key]\n            : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        var _a;\n        (_a = this.events[eventName]) === null || _a === void 0 ? void 0 : _a.notify(...args);\n    }\n}\nconst variantProps = [\"initial\", ...variantPriorityOrder];\nconst numVariantProps = variantProps.length;\n\nexport { VisualElement };\n"],"mappings":"AAAA,SAASA,IAAT,EAAeC,UAAf,QAAiC,wBAAjC;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,YAAnC;AACA,SAASC,aAAT,QAA8B,OAA9B;AACA,SAASC,kBAAT,QAAmC,oCAAnC;AACA,SAASC,SAAT,QAA0B,mCAA1B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,wBAAT,QAAyC,mCAAzC;AACA,SAASC,wBAAT,EAAmCC,oBAAnC,QAA+D,mCAA/D;AACA,SAASC,mBAAT,QAAoC,mCAApC;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,uBAAT,QAAwC,iCAAxC;AACA,SAASC,aAAT,QAA8B,oCAA9B;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAASC,oBAAT,QAAqC,6BAArC;AACA,SAASC,qBAAT,EAAgCC,aAAhC,QAAqD,qCAArD;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,SAASC,2BAAT,QAA4C,2BAA5C;AACA,SAASC,uBAAT,QAAwC,8BAAxC;AACA,SAASC,QAAT,QAAyB,wBAAzB;AAEA,MAAMC,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYpB,kBAAZ,CAArB;AACA,MAAMqB,WAAW,GAAGH,YAAY,CAACI,MAAjC;AACA,MAAMC,iBAAiB,GAAG,CACtB,gBADsB,EAEtB,mBAFsB,EAGtB,QAHsB,EAItB,qBAJsB,EAKtB,eALsB,EAMtB,sBANsB,EAOtB,yBAPsB,CAA1B;AASA;AACA;AACA;AACA;;AACA,MAAMC,aAAN,CAAoB;EAChBC,WAAW,OAAqE;IAAA,IAApE;MAAEC,MAAF;MAAUC,KAAV;MAAiBC,mBAAjB;MAAsCC;IAAtC,CAAoE;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IAC5E;AACR;AACA;AACA;IACQ,KAAKC,OAAL,GAAe,IAAf;IACA;AACR;AACA;;IACQ,KAAKC,QAAL,GAAgB,IAAIC,GAAJ,EAAhB;IACA;AACR;AACA;;IACQ,KAAKpB,aAAL,GAAqB,KAArB;IACA,KAAKD,qBAAL,GAA6B,KAA7B;IACA;AACR;AACA;AACA;AACA;AACA;AACA;;IACQ,KAAKsB,kBAAL,GAA0B,IAA1B;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,MAAL,GAAc,IAAIC,GAAJ,EAAd;IACA;AACR;AACA;AACA;;IACQ,KAAKC,SAAL,GAAiB,IAAjB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,kBAAL,GAA0B,IAAIF,GAAJ,EAA1B;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKG,gBAAL,GAAwB,EAAxB;IACA;AACR;AACA;;IACQ,KAAKC,MAAL,GAAc,EAAd;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,sBAAL,GAA8B,EAA9B;;IACA,KAAKC,YAAL,GAAoB,MAAM,KAAKC,MAAL,CAAY,QAAZ,EAAsB,KAAKC,YAA3B,CAA1B;;IACA,KAAKC,MAAL,GAAc,MAAM;MAChB,IAAI,CAAC,KAAKd,OAAV,EACI;MACJ,KAAKe,YAAL;MACA,KAAKC,cAAL,CAAoB,KAAKhB,OAAzB,EAAkC,KAAKiB,WAAvC,EAAoD,KAAKrB,KAAL,CAAWsB,KAA/D,EAAsE,KAAKC,UAA3E;IACH,CALD;;IAMA,KAAKC,cAAL,GAAsB,MAAMxD,IAAI,CAACkD,MAAL,CAAY,KAAKA,MAAjB,EAAyB,KAAzB,EAAgC,IAAhC,CAA5B;;IACA,MAAM;MAAED,YAAF;MAAgBI;IAAhB,IAAgCnB,WAAtC;IACA,KAAKe,YAAL,GAAoBA,YAApB;IACA,KAAKQ,UAAL,GAAkB,EAAE,GAAGR;IAAL,CAAlB;IACA,KAAKS,aAAL,GAAqB1B,KAAK,CAAC2B,OAAN,GAAgB,EAAE,GAAGV;IAAL,CAAhB,GAAsC,EAA3D;IACA,KAAKI,WAAL,GAAmBA,WAAnB;IACA,KAAKtB,MAAL,GAAcA,MAAd;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAK4B,KAAL,GAAa7B,MAAM,GAAGA,MAAM,CAAC6B,KAAP,GAAe,CAAlB,GAAsB,CAAzC;IACA,KAAK3B,mBAAL,GAA2BA,mBAA3B;IACA,KAAKE,OAAL,GAAeA,OAAf;IACA,KAAKlB,qBAAL,GAA6BA,qBAAqB,CAACe,KAAD,CAAlD;IACA,KAAKd,aAAL,GAAqBA,aAAa,CAACc,KAAD,CAAlC;;IACA,IAAI,KAAKd,aAAT,EAAwB;MACpB,KAAK2C,eAAL,GAAuB,IAAIvB,GAAJ,EAAvB;IACH;;IACD,KAAKwB,sBAAL,GAA8BC,OAAO,CAAChC,MAAM,IAAIA,MAAM,CAACK,OAAlB,CAArC;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQ,MAAM;MAAE4B,UAAF;MAAc,GAAGC;IAAjB,IAAyC,KAAKC,2BAAL,CAAiClC,KAAjC,EAAwC,EAAxC,CAA/C;;IACA,KAAK,MAAMmC,GAAX,IAAkBF,mBAAlB,EAAuC;MACnC,MAAMG,KAAK,GAAGH,mBAAmB,CAACE,GAAD,CAAjC;;MACA,IAAIlB,YAAY,CAACkB,GAAD,CAAZ,KAAsBE,SAAtB,IAAmCvD,aAAa,CAACsD,KAAD,CAApD,EAA6D;QACzDA,KAAK,CAACE,GAAN,CAAUrB,YAAY,CAACkB,GAAD,CAAtB,EAA6B,KAA7B;;QACA,IAAItD,uBAAuB,CAACmD,UAAD,CAA3B,EAAyC;UACrCA,UAAU,CAACO,GAAX,CAAeJ,GAAf;QACH;MACJ;IACJ;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACID,2BAA2B,CAACM,MAAD,EAASC,UAAT,EAAqB;IAC5C,OAAO,EAAP;EACH;;EACDC,KAAK,CAACC,QAAD,EAAW;IACZ,IAAIC,EAAJ;;IACA,KAAKxC,OAAL,GAAeuC,QAAf;;IACA,IAAI,KAAKpB,UAAT,EAAqB;MACjB,KAAKA,UAAL,CAAgBmB,KAAhB,CAAsBC,QAAtB;IACH;;IACD,IAAI,KAAK5C,MAAL,IAAe,KAAKb,aAApB,IAAqC,CAAC,KAAKD,qBAA/C,EAAsE;MAClE,KAAK4D,qBAAL,GAA6B,CAACD,EAAE,GAAG,KAAK7C,MAAX,MAAuB,IAAvB,IAA+B6C,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACE,eAAH,CAAmB,IAAnB,CAArF;IACH;;IACD,KAAKtC,MAAL,CAAYuC,OAAZ,CAAoB,CAACX,KAAD,EAAQD,GAAR,KAAgB,KAAKa,iBAAL,CAAuBb,GAAvB,EAA4BC,KAA5B,CAApC;;IACA,IAAI,CAAC3D,wBAAwB,CAAC2B,OAA9B,EAAuC;MACnC5B,wBAAwB;IAC3B;;IACD,KAAK+B,kBAAL,GACI,KAAKN,mBAAL,KAA6B,OAA7B,GACM,KADN,GAEM,KAAKA,mBAAL,KAA6B,QAA7B,GACI,IADJ,GAEIvB,oBAAoB,CAAC0B,OALnC;;IAMA,IAAI6C,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACvC7D,QAAQ,CAAC,KAAKiB,kBAAL,KAA4B,IAA7B,EAAmC,wFAAnC,CAAR;IACH;;IACD,IAAI,KAAKR,MAAT,EACI,KAAKA,MAAL,CAAYM,QAAZ,CAAqBkC,GAArB,CAAyB,IAAzB;IACJ,KAAKa,QAAL,CAAc,KAAKpD,KAAnB;EACH;;EACDqD,OAAO,GAAG;IACN,IAAIT,EAAJ,EAAQU,EAAR,EAAYC,EAAZ;;IACA,CAACX,EAAE,GAAG,KAAKrB,UAAX,MAA2B,IAA3B,IAAmCqB,EAAE,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,EAAE,CAACS,OAAH,EAA5D;IACApF,UAAU,CAACuF,MAAX,CAAkB,KAAKzC,YAAvB;IACA9C,UAAU,CAACiD,MAAX,CAAkB,KAAKA,MAAvB;IACA,KAAKP,kBAAL,CAAwBoC,OAAxB,CAAiCU,MAAD,IAAYA,MAAM,EAAlD;IACA,CAACH,EAAE,GAAG,KAAKT,qBAAX,MAAsC,IAAtC,IAA8CS,EAAE,KAAK,KAAK,CAA1D,GAA8D,KAAK,CAAnE,GAAuEA,EAAE,CAACI,IAAH,CAAQ,IAAR,CAAvE;IACA,CAACH,EAAE,GAAG,KAAKxD,MAAX,MAAuB,IAAvB,IAA+BwD,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAAClD,QAAH,CAAYsD,MAAZ,CAAmB,IAAnB,CAAxD;;IACA,KAAK,MAAMxB,GAAX,IAAkB,KAAKtB,MAAvB,EAA+B;MAC3B,KAAKA,MAAL,CAAYsB,GAAZ,EAAiByB,KAAjB;IACH;;IACD,KAAKxD,OAAL,GAAe,IAAf;EACH;;EACD4C,iBAAiB,CAACb,GAAD,EAAMC,KAAN,EAAa;IAC1B,MAAMyB,gBAAgB,GAAG9E,cAAc,CAAC+E,GAAf,CAAmB3B,GAAnB,CAAzB;IACA,MAAM4B,cAAc,GAAG3B,KAAK,CAAC4B,EAAN,CAAS,QAAT,EAAoBC,WAAD,IAAiB;MACvD,KAAKhD,YAAL,CAAkBkB,GAAlB,IAAyB8B,WAAzB;MACA,KAAKjE,KAAL,CAAWkE,QAAX,IACIlG,IAAI,CAACwF,MAAL,CAAY,KAAKzC,YAAjB,EAA+B,KAA/B,EAAsC,IAAtC,CADJ;;MAEA,IAAI8C,gBAAgB,IAAI,KAAKtC,UAA7B,EAAyC;QACrC,KAAKA,UAAL,CAAgB4C,gBAAhB,GAAmC,IAAnC;MACH;IACJ,CAPsB,CAAvB;IAQA,MAAMC,qBAAqB,GAAGhC,KAAK,CAAC4B,EAAN,CAAS,eAAT,EAA0B,KAAKxC,cAA/B,CAA9B;IACA,KAAKb,kBAAL,CAAwB2B,GAAxB,CAA4BH,GAA5B,EAAiC,MAAM;MACnC4B,cAAc;MACdK,qBAAqB;IACxB,CAHD;EAIH;;EACDC,gBAAgB,CAACC,KAAD,EAAQ;IACpB;AACR;AACA;IACQ,IAAI,CAAC,KAAKlE,OAAN,IACA,CAAC,KAAKmE,wBADN,IAEA,KAAKC,IAAL,KAAcF,KAAK,CAACE,IAFxB,EAGI,OAAO,CAAP;IACJ,OAAO,KAAKD,wBAAL,CAA8B,KAAKnE,OAAnC,EAA4CkE,KAAK,CAAClE,OAAlD,CAAP;EACH;;EACDqE,YAAY,QAAiCC,QAAjC,EAA2CC,iBAA3C,EAA8DC,YAA9D,EAA4EC,yBAA5E,EAAuGC,wBAAvG,EAAiI;IAAA,IAAhI;MAAEzE,QAAF;MAAY,GAAG0E;IAAf,CAAgI;IACzI,MAAMC,QAAQ,GAAG,EAAjB;IACA;AACR;AACA;AACA;;IACQ,IAAI/B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IACAwB,iBADA,IAEAD,QAFJ,EAEc;MACV,MAAMO,aAAa,GAAG,kJAAtB;MACAF,aAAa,CAACG,YAAd,GACMhH,OAAO,CAAC,KAAD,EAAQ+G,aAAR,CADb,GAEM9G,SAAS,CAAC,KAAD,EAAQ8G,aAAR,CAFf;IAGH;;IACD,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzF,WAApB,EAAiCyF,CAAC,EAAlC,EAAsC;MAClC,MAAMC,IAAI,GAAG7F,YAAY,CAAC4F,CAAD,CAAzB;MACA,MAAM;QAAEE,SAAF;QAAaC;MAAb,IAA2BjH,kBAAkB,CAAC+G,IAAD,CAAnD;MACA;AACZ;AACA;AACA;AACA;;MACY,IAAIC,SAAS,CAACN,aAAD,CAAT,IAA4BO,SAAhC,EAA2C;QACvCN,QAAQ,CAACO,IAAT,CAAcnH,aAAa,CAACkH,SAAD,EAAY;UACnCnD,GAAG,EAAEiD,IAD8B;UAEnC,GAAGL,aAFgC;UAGnCS,aAAa,EAAE;QAHoB,CAAZ,CAA3B;MAKH;IACJ;;IACD,IAAI,CAAC,KAAKjE,UAAN,IAAoBsD,yBAAxB,EAAmD;MAC/C,KAAKtD,UAAL,GAAkB,IAAIsD,yBAAJ,CAA8BD,YAA9B,EAA4C,KAAK3D,YAAjD,EAA+D,KAAKlB,MAAL,IAAe,KAAKA,MAAL,CAAYwB,UAA1F,CAAlB;MACA,MAAM;QAAEkE,QAAF;QAAYC,MAAZ;QAAoBC,IAApB;QAA0BC,eAA1B;QAA2CC,YAA3C;QAAyDC;MAAzD,IAAyEf,aAA/E;MACA,KAAKxD,UAAL,CAAgBwE,UAAhB,CAA2B;QACvBN,QADuB;QAEvBC,MAFuB;QAGvBM,mBAAmB,EAAEjE,OAAO,CAAC4D,IAAD,CAAP,IAChBC,eAAe,IAAIrH,WAAW,CAACqH,eAAD,CAJZ;QAKvBJ,aAAa,EAAE,IALQ;QAMvBhE,cAAc,EAAE,MAAM,KAAKA,cAAL,EANC;;QAOvB;AAChB;AACA;AACA;AACA;AACA;AACA;QACgByE,aAAa,EAAE,OAAOP,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsC,MAd9B;QAevBQ,sBAAsB,EAAEpB,wBAfD;QAgBvBe,YAhBuB;QAiBvBC;MAjBuB,CAA3B;IAmBH;;IACD,OAAOd,QAAP;EACH;;EACD7D,YAAY,GAAG;IACX,KAAKgF,KAAL,CAAW,KAAK9E,WAAhB,EAA6B,KAAKJ,YAAlC,EAAgD,KAAKd,OAArD,EAA8D,KAAKH,KAAnE;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIoG,kBAAkB,GAAG;IACjB,OAAO,KAAKhG,OAAL,GACD,KAAKiG,0BAAL,CAAgC,KAAKjG,OAArC,EAA8C,KAAKJ,KAAnD,CADC,GAED1B,SAAS,EAFf;EAGH;;EACDgI,cAAc,CAACnE,GAAD,EAAM;IAChB,OAAO,KAAKlB,YAAL,CAAkBkB,GAAlB,CAAP;EACH;;EACDoE,cAAc,CAACpE,GAAD,EAAMC,KAAN,EAAa;IACvB,KAAKnB,YAAL,CAAkBkB,GAAlB,IAAyBC,KAAzB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIoE,oBAAoB,CAACC,MAAD,EAA2B;IAAA,IAAlBC,SAAkB,uEAAN,IAAM;IAC3C,OAAO,KAAKC,gCAAL,CAAsCF,MAAtC,EAA8C,KAAKzG,KAAnD,EAA0D0G,SAA1D,CAAP;EACH;EACD;AACJ;AACA;AACA;;;EACItD,QAAQ,CAACpD,KAAD,EAAQ;IACZ,IAAIA,KAAK,CAAC4G,iBAAN,IAA2B,KAAK5G,KAAL,CAAW4G,iBAA1C,EAA6D;MACzD,KAAKpF,cAAL;IACH;;IACD,MAAMqF,SAAS,GAAG,KAAK7G,KAAvB;IACA,KAAKA,KAAL,GAAaA,KAAb;IACA;AACR;AACA;;IACQ,KAAK,IAAImF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvF,iBAAiB,CAACD,MAAtC,EAA8CwF,CAAC,EAA/C,EAAmD;MAC/C,MAAMhD,GAAG,GAAGvC,iBAAiB,CAACuF,CAAD,CAA7B;;MACA,IAAI,KAAKrE,sBAAL,CAA4BqB,GAA5B,CAAJ,EAAsC;QAClC,KAAKrB,sBAAL,CAA4BqB,GAA5B;QACA,OAAO,KAAKrB,sBAAL,CAA4BqB,GAA5B,CAAP;MACH;;MACD,MAAM2E,QAAQ,GAAG9G,KAAK,CAAC,OAAOmC,GAAR,CAAtB;;MACA,IAAI2E,QAAJ,EAAc;QACV,KAAKhG,sBAAL,CAA4BqB,GAA5B,IAAmC,KAAK6B,EAAL,CAAQ7B,GAAR,EAAa2E,QAAb,CAAnC;MACH;IACJ;;IACD,KAAKlG,gBAAL,GAAwBxB,2BAA2B,CAAC,IAAD,EAAO,KAAK8C,2BAAL,CAAiClC,KAAjC,EAAwC6G,SAAxC,CAAP,EAA2D,KAAKjG,gBAAhE,CAAnD;;IACA,IAAI,KAAKmG,sBAAT,EAAiC;MAC7B,KAAKA,sBAAL;IACH;EACJ;;EACDC,QAAQ,GAAG;IACP,OAAO,KAAKhH,KAAZ;EACH;EACD;AACJ;AACA;;;EACIiH,UAAU,CAAC7B,IAAD,EAAO;IACb,IAAIxC,EAAJ;;IACA,OAAO,CAACA,EAAE,GAAG,KAAK5C,KAAL,CAAWkH,QAAjB,MAA+B,IAA/B,IAAuCtE,EAAE,KAAK,KAAK,CAAnD,GAAuD,KAAK,CAA5D,GAAgEA,EAAE,CAACwC,IAAD,CAAzE;EACH;EACD;AACJ;AACA;;;EACI+B,oBAAoB,GAAG;IACnB,OAAO,KAAKnH,KAAL,CAAWoH,UAAlB;EACH;;EACDC,qBAAqB,GAAG;IACpB,OAAO,KAAKrH,KAAL,CAAWsH,kBAAlB;EACH;;EACDC,qBAAqB,GAAG;IACpB,IAAI3E,EAAJ;;IACA,OAAO,KAAK1D,aAAL,GAAqB,IAArB,GAA4B,CAAC0D,EAAE,GAAG,KAAK7C,MAAX,MAAuB,IAAvB,IAA+B6C,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAAC2E,qBAAH,EAA3F;EACH;;EACDC,iBAAiB,GAAwB;IAAA,IAAvBC,aAAuB,uEAAP,KAAO;;IACrC,IAAI7E,EAAJ,EAAQU,EAAR;;IACA,IAAImE,aAAJ,EACI,OAAO,CAAC7E,EAAE,GAAG,KAAK7C,MAAX,MAAuB,IAAvB,IAA+B6C,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAAC4E,iBAAH,EAA/D;;IACJ,IAAI,CAAC,KAAKvI,qBAAV,EAAiC;MAC7B,MAAMyI,OAAO,GAAG,CAAC,CAACpE,EAAE,GAAG,KAAKvD,MAAX,MAAuB,IAAvB,IAA+BuD,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACkE,iBAAH,EAAzD,KAAoF,EAApG;;MACA,IAAI,KAAKxH,KAAL,CAAW2B,OAAX,KAAuBU,SAA3B,EAAsC;QAClCqF,OAAO,CAAC/F,OAAR,GAAkB,KAAK3B,KAAL,CAAW2B,OAA7B;MACH;;MACD,OAAO+F,OAAP;IACH;;IACD,MAAMA,OAAO,GAAG,EAAhB;;IACA,KAAK,IAAIvC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwC,eAApB,EAAqCxC,CAAC,EAAtC,EAA0C;MACtC,MAAMC,IAAI,GAAGwC,YAAY,CAACzC,CAAD,CAAzB;MACA,MAAM0C,IAAI,GAAG,KAAK7H,KAAL,CAAWoF,IAAX,CAAb;;MACA,IAAIjG,cAAc,CAAC0I,IAAD,CAAd,IAAwBA,IAAI,KAAK,KAArC,EAA4C;QACxCH,OAAO,CAACtC,IAAD,CAAP,GAAgByC,IAAhB;MACH;IACJ;;IACD,OAAOH,OAAP;EACH;EACD;AACJ;AACA;;;EACI5E,eAAe,CAACgF,KAAD,EAAQ;IACnB,IAAIlF,EAAJ;;IACA,MAAMmF,kBAAkB,GAAG,KAAKR,qBAAL,EAA3B;;IACA,IAAIQ,kBAAJ,EAAwB;MACpB,CAACnF,EAAE,GAAGmF,kBAAkB,CAAClG,eAAzB,MAA8C,IAA9C,IAAsDe,EAAE,KAAK,KAAK,CAAlE,GAAsE,KAAK,CAA3E,GAA+EA,EAAE,CAACL,GAAH,CAAOuF,KAAP,CAA/E;MACA,OAAO,MAAMC,kBAAkB,CAAClG,eAAnB,CAAmC8B,MAAnC,CAA0CmE,KAA1C,CAAb;IACH;EACJ;EACD;AACJ;AACA;;;EACIE,QAAQ,CAAC7F,GAAD,EAAMC,KAAN,EAAa;IACjB;IACA,IAAIA,KAAK,KAAK,KAAK5B,MAAL,CAAYyH,GAAZ,CAAgB9F,GAAhB,CAAd,EAAoC;MAChC,KAAK+F,WAAL,CAAiB/F,GAAjB;MACA,KAAKa,iBAAL,CAAuBb,GAAvB,EAA4BC,KAA5B;IACH;;IACD,KAAK5B,MAAL,CAAY8B,GAAZ,CAAgBH,GAAhB,EAAqBC,KAArB;IACA,KAAKnB,YAAL,CAAkBkB,GAAlB,IAAyBC,KAAK,CAAC6F,GAAN,EAAzB;EACH;EACD;AACJ;AACA;;;EACIC,WAAW,CAAC/F,GAAD,EAAM;IACb,IAAIS,EAAJ;;IACA,KAAKpC,MAAL,CAAYmD,MAAZ,CAAmBxB,GAAnB;IACA,CAACS,EAAE,GAAG,KAAKjC,kBAAL,CAAwBsH,GAAxB,CAA4B9F,GAA5B,CAAN,MAA4C,IAA5C,IAAoDS,EAAE,KAAK,KAAK,CAAhE,GAAoE,KAAK,CAAzE,GAA6EA,EAAE,EAA/E;IACA,KAAKjC,kBAAL,CAAwBgD,MAAxB,CAA+BxB,GAA/B;IACA,OAAO,KAAKlB,YAAL,CAAkBkB,GAAlB,CAAP;IACA,KAAKgG,0BAAL,CAAgChG,GAAhC,EAAqC,KAAKd,WAA1C;EACH;EACD;AACJ;AACA;;;EACI+G,QAAQ,CAACjG,GAAD,EAAM;IACV,OAAO,KAAK3B,MAAL,CAAYsD,GAAZ,CAAgB3B,GAAhB,CAAP;EACH;;EACDkG,QAAQ,CAAClG,GAAD,EAAMmG,YAAN,EAAoB;IACxB,IAAI,KAAKtI,KAAL,CAAWQ,MAAX,IAAqB,KAAKR,KAAL,CAAWQ,MAAX,CAAkB2B,GAAlB,CAAzB,EAAiD;MAC7C,OAAO,KAAKnC,KAAL,CAAWQ,MAAX,CAAkB2B,GAAlB,CAAP;IACH;;IACD,IAAIC,KAAK,GAAG,KAAK5B,MAAL,CAAYyH,GAAZ,CAAgB9F,GAAhB,CAAZ;;IACA,IAAIC,KAAK,KAAKC,SAAV,IAAuBiG,YAAY,KAAKjG,SAA5C,EAAuD;MACnDD,KAAK,GAAGxD,WAAW,CAAC0J,YAAD,EAAe;QAAEC,KAAK,EAAE;MAAT,CAAf,CAAnB;MACA,KAAKP,QAAL,CAAc7F,GAAd,EAAmBC,KAAnB;IACH;;IACD,OAAOA,KAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIoG,SAAS,CAACrG,GAAD,EAAM;IACX,OAAO,KAAKlB,YAAL,CAAkBkB,GAAlB,MAA2BE,SAA3B,IAAwC,CAAC,KAAKjC,OAA9C,GACD,KAAKa,YAAL,CAAkBkB,GAAlB,CADC,GAED,KAAKsG,qBAAL,CAA2B,KAAKrI,OAAhC,EAAyC+B,GAAzC,EAA8C,KAAKhC,OAAnD,CAFN;EAGH;EACD;AACJ;AACA;AACA;;;EACIuI,aAAa,CAACvG,GAAD,EAAMC,KAAN,EAAa;IACtB,KAAKX,UAAL,CAAgBU,GAAhB,IAAuBC,KAAvB;EACH;EACD;AACJ;AACA;AACA;;;EACIuG,aAAa,CAACxG,GAAD,EAAM;IACf,IAAIS,EAAJ;;IACA,MAAM;MAAEjB;IAAF,IAAc,KAAK3B,KAAzB;IACA,MAAM4I,gBAAgB,GAAG,OAAOjH,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAP,KAAmB,QAAlD,GACnB,CAACiB,EAAE,GAAGvD,uBAAuB,CAAC,KAAKW,KAAN,EAAa2B,OAAb,CAA7B,MAAwD,IAAxD,IAAgEiB,EAAE,KAAK,KAAK,CAA5E,GAAgF,KAAK,CAArF,GAAyFA,EAAE,CAACT,GAAD,CADxE,GAEnBE,SAFN;IAGA;AACR;AACA;;IACQ,IAAIV,OAAO,IAAIiH,gBAAgB,KAAKvG,SAApC,EAA+C;MAC3C,OAAOuG,gBAAP;IACH;IACD;AACR;AACA;AACA;;;IACQ,MAAMnC,MAAM,GAAG,KAAKoC,sBAAL,CAA4B,KAAK7I,KAAjC,EAAwCmC,GAAxC,CAAf;IACA,IAAIsE,MAAM,KAAKpE,SAAX,IAAwB,CAACvD,aAAa,CAAC2H,MAAD,CAA1C,EACI,OAAOA,MAAP;IACJ;AACR;AACA;AACA;;IACQ,OAAO,KAAK/E,aAAL,CAAmBS,GAAnB,MAA4BE,SAA5B,IACHuG,gBAAgB,KAAKvG,SADlB,GAEDA,SAFC,GAGD,KAAKZ,UAAL,CAAgBU,GAAhB,CAHN;EAIH;;EACD6B,EAAE,CAAC8E,SAAD,EAAYC,QAAZ,EAAsB;IACpB,IAAI,CAAC,KAAKlI,MAAL,CAAYiI,SAAZ,CAAL,EAA6B;MACzB,KAAKjI,MAAL,CAAYiI,SAAZ,IAAyB,IAAInK,mBAAJ,EAAzB;IACH;;IACD,OAAO,KAAKkC,MAAL,CAAYiI,SAAZ,EAAuBvG,GAAvB,CAA2BwG,QAA3B,CAAP;EACH;;EACD/H,MAAM,CAAC8H,SAAD,EAAqB;IACvB,IAAIlG,EAAJ;;IADuB,kCAANoG,IAAM;MAANA,IAAM;IAAA;;IAEvB,CAACpG,EAAE,GAAG,KAAK/B,MAAL,CAAYiI,SAAZ,CAAN,MAAkC,IAAlC,IAA0ClG,EAAE,KAAK,KAAK,CAAtD,GAA0D,KAAK,CAA/D,GAAmEA,EAAE,CAAC5B,MAAH,CAAU,GAAGgI,IAAb,CAAnE;EACH;;AA1be;;AA4bpB,MAAMpB,YAAY,GAAG,CAAC,SAAD,EAAY,GAAG5I,oBAAf,CAArB;AACA,MAAM2I,eAAe,GAAGC,YAAY,CAACjI,MAArC;AAEA,SAASE,aAAT"},"metadata":{},"sourceType":"module"}